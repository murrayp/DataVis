---
title: "Time series display"
author: "PM"
filters:
  - shinylive
---



## App for time series exploration 

::: {#fig-dataexplore}
```{shinylive-python}
#| standalone: true
#| components: [viewer]
#| viewerHeight: 2000

from shiny import App, Inputs, Outputs, Session, render, ui
from shiny import reactive

import numpy as np
import pandas as pd
from pathlib import Path
import pandas as pd
import matplotlib.pyplot as plt
from scipy.signal import detrend
import scipy.ndimage as nd
from scipy.signal import savgol_filter

my_file = Path(__file__).parent / "SamplePointsMasterFrame.csv"
df_orig = pd.read_csv(my_file)

title_str=['N','D','M','W','N','D','M','W']

app_ui = ui.page_fluid(
    ui.layout_sidebar(
        ui.panel_sidebar(
    ui.input_checkbox_group(
        "selectedn",
        " Column:",
        {
            "0": ui.span("c=1", style="color: #111112;"),
            "1": ui.span("c=2", style="color: #111112;"),
            "2": ui.span("c=3", style="color: #111112;"),
            "3": ui.span("c=4", style="color: #111112;"),
            "4": ui.span("c=5", style="color: #111112;"),
            "5": ui.span("c=6", style="color: #111112;"),
            "6": ui.span("c=7", style="color: #111112;"),
            "7": ui.span("c=8", style="color: #111112;"),
        },
        selected=["0","1","2","3"]
    ),
    ui.input_select(id='smooth',label="smooth",choices=["none","median","uniform","gaussian","savgol"],  selected=['gaussian']),
    ui.input_slider(id="sm_param",label="Smooth. param",min=0.0,max=8.0,value=1.9,step=0.1),  
    ui.input_checkbox(id='detrend',label="detrend",value=[]),
    ui.input_checkbox(id='donorm',label="Normalise",value=['donorm']),
    ui.input_select(id='difference',label="Difference",choices=['none','diff','rel. diff'],selected='none'),
    ui.input_slider(id="t_max",label="Samp. time",min=0.0,max=21.0,value=[5.0,20.0],step=0.1),  
    ui.input_file(id='input_file',label='Input file'),
            ),
        ui.panel_main(ui.output_plot("plot"),),
    ),    
)

def server(input, output, session):
    
  @render.plot
  def plot():
    def parsed_file():
      file: list[FileInfo] | None = input.input_file()
      if file is None:
          return pd.DataFrame()
      return pd.read_csv(  # pyright: ignore[reportUnknownMemberType]
file[0]["datapath"],index_col=False
      )
    #ax.set_ylim([-2, 2])
    # Filter fata
    global df_orig

    if input.input_file():
      df_orig = parsed_file()
    
    df=df_orig.copy()
    df.ffill(inplace=True)

    gaussian_smoothing_param=input.sm_param() #input.gauss_sig()
    t_min=input.t_max()[0]*60
    t_max=input.t_max()[1]*60
    do_detrend=input.detrend()
    do_smoothing=input.smooth()
    do_norm=input.donorm()
    difference=input.difference()

    leg_str=(df.columns).to_numpy()

    select_cols=input.selectedn()

    select_cols=[int(i) for i in select_cols]



    df=df[(df['Time (mins)']>t_min)& (df['Time (mins)']<t_max)]
    df_np=df.to_numpy()

    leg_str=leg_str[1:df_np.shape[1]]


    time=df_np[:,0]/60.0
    df_np=df_np[:,1:df_np.shape[1]]

    if do_norm:
      for i in range(df_np.shape[1]):
        df_np[:,i]=df_np[:,i]/df_np[0,i]

    if do_smoothing=="median":
        #df_np=nd.gaussian_filter1d(df_np,sigma=gaussian_smoothing_param,axis=0)
        gaussian_smoothing_param_eff=int(np.ceil(gaussian_smoothing_param))
        df_np=nd.median_filter(df_np,size=(gaussian_smoothing_param_eff,1))
    elif do_smoothing=="gaussian":
        df_np=nd.gaussian_filter(df_np,sigma=(gaussian_smoothing_param,0))
    elif do_smoothing=="uniform":
        df_np=nd.uniform_filter(df_np,size=(gaussian_smoothing_param,1))
    elif do_smoothing=="savgol":
        gaussian_smoothing_param_eff=int(np.ceil(gaussian_smoothing_param))
        df_np=savgol_filter(df_np,axis=(0),window_length=gaussian_smoothing_param_eff,polyorder=3)
        #signal_mean=ndimage.uniform_filter(signal_mean,axes=0,size=5)
    
    if difference=='diff':
      df_np=np.diff(df_np,axis=0)
      time=time[0:len(time)-1]
      #df_np=nd.median_filter(df_np,size=gaussian_smoothing_param)
    elif difference=='rel. diff':
      df_np=np.diff(df_np,axis=0)/df_np[0:len(time)-1,:]
      time=time[0:len(time)-1]
      #df_np=nd.gaussian_filter1d(df_np,sigma=gaussian_smoothing_param,axis=0)
      #df_np=nd.median_filter(df_np,size=gaussian_smoothing_param)
    assert(df_np.shape[1]==8)
    

    

    if do_detrend:
        df_np=detrend(df_np,axes=0)

    shift_ind=0
    fig,ax=plt.subplots()
    ax.plot(time,df_np[:,select_cols])
    ax.grid(True)
    ax.legend(leg_str[select_cols])

app = App(app_ui, server)

## file: SamplePointsMasterFrame.csv
Time (mins),A,B,C,D,E,F,G,H
0,7.572,8.485,10.094,10.65,8.099,8.107,8.219,7.759
10,7.572,8.485,10.094,10.65,8.099,8.107,8.219,7.759
20,7.572,8.485,10.094,10.65,8.099,8.107,8.219,7.759
30,7.572,8.485,10.094,10.65,8.099,8.107,8.219,7.759
```
An app for exploring all the data.
:::


