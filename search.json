[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "Model1.html",
    "href": "Model1.html",
    "title": "Time series display",
    "section": "",
    "text": "#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 2000\n\nfrom shiny import App, Inputs, Outputs, Session, render, ui\nfrom shiny import reactive\n\nimport numpy as np\nimport pandas as pd\nfrom pathlib import Path\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom scipy.signal import detrend\nimport scipy.ndimage as nd\nfrom scipy.integrate import solve_ivp\n\n\n\napp_ui = ui.page_fluid(\n    ui.layout_sidebar(\n        ui.panel_sidebar(\n    \n  \n    ui.input_slider(id='Coupling',label=\"Coupling\",  min=0.0,max=3.0,value=0.01,step=0.005),\n\n    ui.input_slider(id='cell_back_ground',label=\"cell_back_ground\",  min=0.0,max=3.0,value=0.1,step=0.005),\n    ui.input_slider(id='trend_strength',label=\"trend_strength\",  min=0.0,max=0.03,value=0.002,step=0.0005),\n    ui.input_slider(id='osc_amp',label=\"osc_amp\",  min=0.0,max=0.03,value=0.004,step=0.0005),\n    ui.input_select(id='Init_cond',label=\"Init_cond\",choices=['Synced','Random'],selected='Synced'),\n            ),\n        ui.panel_main(ui.output_plot(\"plot\"),),\n    ),\n    \n)\n\ndef server(input, output, session):\n    \n  @render.plot\n  def plot():\n    \n    om_i=2*np.pi/4.5\n    A=input.Coupling()\n    N_cells=100\n    a=input.osc_amp()\n    cell_back_ground=input.cell_back_ground()\n    k=input.trend_strength()  \n    init_cond=input.Init_cond()\n\n    def kuramoto(t,y):\n        \n        dydt = np.zeros_like(y)\n\n        for i in range(len(y)):\n\n            coupling_term=np.sum(np.sin(y-y[i]))\n            dydt[i]=om_i+A/N_cells*coupling_term\n        return dydt\n\n    if init_cond=='Synced':\n      y0=np.squeeze(np.zeros((N_cells,1),dtype=float))\n    else:\n      y0=np.squeeze(np.zeros((N_cells,1),dtype=float))\n\n      y0=np.random.uniform(0.0,2*np.pi,len(y0))\n    T=20.0\n\n\n    print(y0)\n    #sol = odeint(pend, y0, t, args=(om_i))\n    sol = solve_ivp(kuramoto, [0, T], y0,dense_output=True,t_eval=np.linspace(0,T,500))\n\n\n    y=sol.y\n    t=sol.t\n\n    gene_exp=a/2.0*(1.0+np.sin(y))+cell_back_ground\n    for i in range(N_cells):\n        gene_exp[i,:]+=t*k\n\n\n    total_sig=np.sum(gene_exp,axis=0)\n\n    fig,ax=plt.subplots(3,1)\n    ax[1].plot(sol.t,gene_exp[0,:], 'b', sol.t,gene_exp[9,:], 'r')\n    ax[1].set_xlabel('$t (h)$')\n    ax[1].set_ylabel('Intensity')\n    ax[1].set_title('Individual oscillators')\n    ax[1].legend(['Osc. 1','Osc. 10'])\n\n    ax[2].plot(sol.t,total_sig, 'b')\n    ax[2].set_ylabel('Intensity')\n    ax[2].set_title('Simulated average over FOV')\n    ax[2].set_xlabel('$t (h)$')\n\n    ax[0].pcolor(gene_exp)\n    ax[0].set_xlabel('$t(h)$')\n    ax[0].set_ylabel('Osc. index')\n    ax[0].set_title('Heat map of all oscillators')\n\n    fig.tight_layout()\n    plt.show()\n\n      \napp = App(app_ui, server)\n\n\n\n\n\nFigure 1: An app for exploring all the data."
  },
  {
    "objectID": "Model1.html#app-for-time-series-exploration",
    "href": "Model1.html#app-for-time-series-exploration",
    "title": "Time series display",
    "section": "",
    "text": "#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 2000\n\nfrom shiny import App, Inputs, Outputs, Session, render, ui\nfrom shiny import reactive\n\nimport numpy as np\nimport pandas as pd\nfrom pathlib import Path\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom scipy.signal import detrend\nimport scipy.ndimage as nd\nfrom scipy.integrate import solve_ivp\n\n\n\napp_ui = ui.page_fluid(\n    ui.layout_sidebar(\n        ui.panel_sidebar(\n    \n  \n    ui.input_slider(id='Coupling',label=\"Coupling\",  min=0.0,max=3.0,value=0.01,step=0.005),\n\n    ui.input_slider(id='cell_back_ground',label=\"cell_back_ground\",  min=0.0,max=3.0,value=0.1,step=0.005),\n    ui.input_slider(id='trend_strength',label=\"trend_strength\",  min=0.0,max=0.03,value=0.002,step=0.0005),\n    ui.input_slider(id='osc_amp',label=\"osc_amp\",  min=0.0,max=0.03,value=0.004,step=0.0005),\n    ui.input_select(id='Init_cond',label=\"Init_cond\",choices=['Synced','Random'],selected='Synced'),\n            ),\n        ui.panel_main(ui.output_plot(\"plot\"),),\n    ),\n    \n)\n\ndef server(input, output, session):\n    \n  @render.plot\n  def plot():\n    \n    om_i=2*np.pi/4.5\n    A=input.Coupling()\n    N_cells=100\n    a=input.osc_amp()\n    cell_back_ground=input.cell_back_ground()\n    k=input.trend_strength()  \n    init_cond=input.Init_cond()\n\n    def kuramoto(t,y):\n        \n        dydt = np.zeros_like(y)\n\n        for i in range(len(y)):\n\n            coupling_term=np.sum(np.sin(y-y[i]))\n            dydt[i]=om_i+A/N_cells*coupling_term\n        return dydt\n\n    if init_cond=='Synced':\n      y0=np.squeeze(np.zeros((N_cells,1),dtype=float))\n    else:\n      y0=np.squeeze(np.zeros((N_cells,1),dtype=float))\n\n      y0=np.random.uniform(0.0,2*np.pi,len(y0))\n    T=20.0\n\n\n    print(y0)\n    #sol = odeint(pend, y0, t, args=(om_i))\n    sol = solve_ivp(kuramoto, [0, T], y0,dense_output=True,t_eval=np.linspace(0,T,500))\n\n\n    y=sol.y\n    t=sol.t\n\n    gene_exp=a/2.0*(1.0+np.sin(y))+cell_back_ground\n    for i in range(N_cells):\n        gene_exp[i,:]+=t*k\n\n\n    total_sig=np.sum(gene_exp,axis=0)\n\n    fig,ax=plt.subplots(3,1)\n    ax[1].plot(sol.t,gene_exp[0,:], 'b', sol.t,gene_exp[9,:], 'r')\n    ax[1].set_xlabel('$t (h)$')\n    ax[1].set_ylabel('Intensity')\n    ax[1].set_title('Individual oscillators')\n    ax[1].legend(['Osc. 1','Osc. 10'])\n\n    ax[2].plot(sol.t,total_sig, 'b')\n    ax[2].set_ylabel('Intensity')\n    ax[2].set_title('Simulated average over FOV')\n    ax[2].set_xlabel('$t (h)$')\n\n    ax[0].pcolor(gene_exp)\n    ax[0].set_xlabel('$t(h)$')\n    ax[0].set_ylabel('Osc. index')\n    ax[0].set_title('Heat map of all oscillators')\n\n    fig.tight_layout()\n    plt.show()\n\n      \napp = App(app_ui, server)\n\n\n\n\n\nFigure 1: An app for exploring all the data."
  },
  {
    "objectID": "TimeSeriesPlot.html",
    "href": "TimeSeriesPlot.html",
    "title": "Time series display",
    "section": "",
    "text": "#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 2000\n\nfrom shiny import App, Inputs, Outputs, Session, render, ui\nfrom shiny import reactive\n\nimport numpy as np\nimport pandas as pd\nfrom pathlib import Path\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom scipy.signal import detrend\nimport scipy.ndimage as nd\n\nmy_file = Path(__file__).parent / \"SamplePointsMasterFrame.csv\"\ndf_orig = pd.read_csv(my_file)\n\ntitle_str=['N','D','M','W','N','D','M','W']\n\napp_ui = ui.page_fluid(\n    ui.layout_sidebar(\n        ui.panel_sidebar(\n    ui.input_checkbox_group(\n        \"selectedn\",\n        \" Column:\",\n        {\n            \"0\": ui.span(\"c=1\", style=\"color: #111112;\"),\n            \"1\": ui.span(\"c=2\", style=\"color: #111112;\"),\n            \"2\": ui.span(\"c=3\", style=\"color: #111112;\"),\n            \"3\": ui.span(\"c=4\", style=\"color: #111112;\"),\n            \"4\": ui.span(\"c=5\", style=\"color: #111112;\"),\n            \"5\": ui.span(\"c=6\", style=\"color: #111112;\"),\n            \"6\": ui.span(\"c=7\", style=\"color: #111112;\"),\n            \"7\": ui.span(\"c=8\", style=\"color: #111112;\"),\n        },\n        selected=[\"0\",\"1\",\"2\",\"3\"]\n    ),\n    ui.input_checkbox(id='smooth',label=\"smooth\",  value=['smooth']),\n    ui.input_checkbox(id='detrend',label=\"detrend\",value=['nodetrend']),\n    ui.input_checkbox(id='donorm',label=\"Normalise\",value=['donorm']),\n    ui.input_select(id='difference',label=\"Difference\",choices=['none','diff','rel. diff'],selected='none'),\n    ui.input_slider(id=\"t_max\",label=\"Samp. time\",min=0.0,max=21.0,value=[5.0,20.0],step=0.1),  \n    ui.input_file(id='input_file',label='Input file'),\n            ),\n        ui.panel_main(ui.output_plot(\"plot\"),),\n    ),    \n)\n\ndef server(input, output, session):\n    \n  @render.plot\n  def plot():\n    def parsed_file():\n      file: list[FileInfo] | None = input.input_file()\n      if file is None:\n          return pd.DataFrame()\n      return pd.read_csv(  # pyright: ignore[reportUnknownMemberType]\nfile[0][\"datapath\"],index_col=False\n      )\n    #ax.set_ylim([-2, 2])\n    # Filter fata\n    global df_orig\n\n    if input.input_file():\n      df_orig = parsed_file()\n    \n    df=df_orig.copy()\n    df.ffill(inplace=True)\n\n    gaussian_smoothing_param=1.5 #input.gauss_sig()\n    t_min=input.t_max()[0]*60\n    t_max=input.t_max()[1]*60\n    do_detrend=input.detrend()\n    do_smoothing=input.smooth()\n    do_norm=input.donorm()\n    difference=input.difference()\n\n    leg_str=(df.columns).to_numpy()\n\n    select_cols=input.selectedn()\n\n    select_cols=[int(i) for i in select_cols]\n\n\n\n    df=df[(df['Time (mins)']&gt;t_min)& (df['Time (mins)']&lt;t_max)]\n    df_np=df.to_numpy()\n\n    leg_str=leg_str[1:df_np.shape[1]]\n\n\n    time=df_np[:,0]/60.0\n    df_np=df_np[:,1:df_np.shape[1]]\n\n    if do_norm:\n      for i in range(df_np.shape[1]):\n        df_np[:,i]=df_np[:,i]/df_np[0,i]\n\n    \n    \n    if difference=='diff':\n      df_np=np.diff(df_np,axis=0)\n      time=time[0:len(time)-1]\n      df_np=nd.gaussian_filter1d(df_np,sigma=gaussian_smoothing_param,axis=0)\n    elif difference=='rel. diff':\n      df_np=np.diff(df_np,axis=0)/df_np[0:len(time)-1,:]\n      time=time[0:len(time)-1]\n      df_np=nd.gaussian_filter1d(df_np,sigma=gaussian_smoothing_param,axis=0)\n\n    if do_smoothing:\n        df_np=nd.gaussian_filter1d(df_np,sigma=gaussian_smoothing_param,axis=0)\n    if do_detrend:\n        df_np=detrend(df_np,axis=0)\n\n    shift_ind=0\n    fig,ax=plt.subplots()\n    ax.plot(time,df_np[:,select_cols])\n\n    ax.legend(leg_str[select_cols])\n\napp = App(app_ui, server)\n\n## file: SamplePointsMasterFrame.csv\nTime (mins),A,B,C,D,E,F,G,H\n0,7.572,8.485,10.094,10.65,8.099,8.107,8.219,7.759\n10,7.572,8.485,10.094,10.65,8.099,8.107,8.219,7.759\n20,7.572,8.485,10.094,10.65,8.099,8.107,8.219,7.759\n30,7.572,8.485,10.094,10.65,8.099,8.107,8.219,7.759\n\n\nFigure 1: An app for exploring all the data."
  },
  {
    "objectID": "TimeSeriesPlot.html#app-for-time-series-exploration",
    "href": "TimeSeriesPlot.html#app-for-time-series-exploration",
    "title": "Time series display",
    "section": "",
    "text": "#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 2000\n\nfrom shiny import App, Inputs, Outputs, Session, render, ui\nfrom shiny import reactive\n\nimport numpy as np\nimport pandas as pd\nfrom pathlib import Path\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom scipy.signal import detrend\nimport scipy.ndimage as nd\n\nmy_file = Path(__file__).parent / \"SamplePointsMasterFrame.csv\"\ndf_orig = pd.read_csv(my_file)\n\ntitle_str=['N','D','M','W','N','D','M','W']\n\napp_ui = ui.page_fluid(\n    ui.layout_sidebar(\n        ui.panel_sidebar(\n    ui.input_checkbox_group(\n        \"selectedn\",\n        \" Column:\",\n        {\n            \"0\": ui.span(\"c=1\", style=\"color: #111112;\"),\n            \"1\": ui.span(\"c=2\", style=\"color: #111112;\"),\n            \"2\": ui.span(\"c=3\", style=\"color: #111112;\"),\n            \"3\": ui.span(\"c=4\", style=\"color: #111112;\"),\n            \"4\": ui.span(\"c=5\", style=\"color: #111112;\"),\n            \"5\": ui.span(\"c=6\", style=\"color: #111112;\"),\n            \"6\": ui.span(\"c=7\", style=\"color: #111112;\"),\n            \"7\": ui.span(\"c=8\", style=\"color: #111112;\"),\n        },\n        selected=[\"0\",\"1\",\"2\",\"3\"]\n    ),\n    ui.input_checkbox(id='smooth',label=\"smooth\",  value=['smooth']),\n    ui.input_checkbox(id='detrend',label=\"detrend\",value=['nodetrend']),\n    ui.input_checkbox(id='donorm',label=\"Normalise\",value=['donorm']),\n    ui.input_select(id='difference',label=\"Difference\",choices=['none','diff','rel. diff'],selected='none'),\n    ui.input_slider(id=\"t_max\",label=\"Samp. time\",min=0.0,max=21.0,value=[5.0,20.0],step=0.1),  \n    ui.input_file(id='input_file',label='Input file'),\n            ),\n        ui.panel_main(ui.output_plot(\"plot\"),),\n    ),    \n)\n\ndef server(input, output, session):\n    \n  @render.plot\n  def plot():\n    def parsed_file():\n      file: list[FileInfo] | None = input.input_file()\n      if file is None:\n          return pd.DataFrame()\n      return pd.read_csv(  # pyright: ignore[reportUnknownMemberType]\nfile[0][\"datapath\"],index_col=False\n      )\n    #ax.set_ylim([-2, 2])\n    # Filter fata\n    global df_orig\n\n    if input.input_file():\n      df_orig = parsed_file()\n    \n    df=df_orig.copy()\n    df.ffill(inplace=True)\n\n    gaussian_smoothing_param=1.5 #input.gauss_sig()\n    t_min=input.t_max()[0]*60\n    t_max=input.t_max()[1]*60\n    do_detrend=input.detrend()\n    do_smoothing=input.smooth()\n    do_norm=input.donorm()\n    difference=input.difference()\n\n    leg_str=(df.columns).to_numpy()\n\n    select_cols=input.selectedn()\n\n    select_cols=[int(i) for i in select_cols]\n\n\n\n    df=df[(df['Time (mins)']&gt;t_min)& (df['Time (mins)']&lt;t_max)]\n    df_np=df.to_numpy()\n\n    leg_str=leg_str[1:df_np.shape[1]]\n\n\n    time=df_np[:,0]/60.0\n    df_np=df_np[:,1:df_np.shape[1]]\n\n    if do_norm:\n      for i in range(df_np.shape[1]):\n        df_np[:,i]=df_np[:,i]/df_np[0,i]\n\n    \n    \n    if difference=='diff':\n      df_np=np.diff(df_np,axis=0)\n      time=time[0:len(time)-1]\n      df_np=nd.gaussian_filter1d(df_np,sigma=gaussian_smoothing_param,axis=0)\n    elif difference=='rel. diff':\n      df_np=np.diff(df_np,axis=0)/df_np[0:len(time)-1,:]\n      time=time[0:len(time)-1]\n      df_np=nd.gaussian_filter1d(df_np,sigma=gaussian_smoothing_param,axis=0)\n\n    if do_smoothing:\n        df_np=nd.gaussian_filter1d(df_np,sigma=gaussian_smoothing_param,axis=0)\n    if do_detrend:\n        df_np=detrend(df_np,axis=0)\n\n    shift_ind=0\n    fig,ax=plt.subplots()\n    ax.plot(time,df_np[:,select_cols])\n\n    ax.legend(leg_str[select_cols])\n\napp = App(app_ui, server)\n\n## file: SamplePointsMasterFrame.csv\nTime (mins),A,B,C,D,E,F,G,H\n0,7.572,8.485,10.094,10.65,8.099,8.107,8.219,7.759\n10,7.572,8.485,10.094,10.65,8.099,8.107,8.219,7.759\n20,7.572,8.485,10.094,10.65,8.099,8.107,8.219,7.759\n30,7.572,8.485,10.094,10.65,8.099,8.107,8.219,7.759\n\n\nFigure 1: An app for exploring all the data."
  },
  {
    "objectID": "TestTableInFigure.html",
    "href": "TestTableInFigure.html",
    "title": "DataVis",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\nfrom pathlib import Path\nimport matplotlib.pyplot as plt\nfrom scipy import stats\nimport seaborn as sns\nfrom scipy.stats import bootstrap\n\n\n#plotting\nfig,ax=plt.subplots()\n\npvalues_mata=np.nan*np.ones((2,2))\n\nprint(pvalues_mata)\n\npvalues_mata[0,0]=5\npvalues_mata[1,0]=6\npvalues_mata[0,1]=7\npvalues_mata[1,1]=8\n\nprint(pvalues_mata)\n\npvalues_matb=np.nan*np.ones((2,2))\nprint(pvalues_matb)\n\npvalues_matb[0,0]=5\npvalues_matb[1,0]=6\n\n\n\npvalues_matb[0,1]=7\npvalues_matb[1,1]=8\n\nprint(pvalues_matb)\n\npvalues_mata=np.array2string(pvalues_mata, precision=2, separator=',',suppress_small=True)\npvalues_matb=np.array2string(pvalues_matb, precision=2, separator=',',suppress_small=True)\n\n\nprint('Hmm')\nprint(pvalues_mata)\n\nprint('Bla')\n\nprint(pvalues_matb)\n\nprint(pvalues_mata+pvalues_matb)\n\n\npvalues_mat=np.empty((2,2),dtype='&lt;U100')\n\nfor i in range(2):\n    for j in range(2):\n        string_mat='asdf' #str(i)\n        pvalues_mat[i,j] = '['+ str(i)+', ' + str(j)+']'\nprint('Final')\n\nprint(pvalues_mat)\n\nax.table(cellText=pvalues_mat,\n            colWidths=[0.1] * 2,\n            loc='upper right')\nplt.show()\n\n[[nan nan]\n [nan nan]]\n[[5. 7.]\n [6. 8.]]\n[[nan nan]\n [nan nan]]\n[[5. 7.]\n [6. 8.]]\nHmm\n[[5.,7.],\n [6.,8.]]\nBla\n[[5.,7.],\n [6.,8.]]\n[[5.,7.],\n [6.,8.]][[5.,7.],\n [6.,8.]]\nFinal\n[['[0, 0]' '[0, 1]']\n ['[1, 0]' '[1, 1]']]"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data display",
    "section": "",
    "text": "#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 2000\n\nfrom shiny import App, Inputs, Outputs, Session, render, ui\nfrom shiny import reactive\n\nimport numpy as np\nimport pandas as pd\nfrom pathlib import Path\nimport matplotlib.pyplot as plt\nfrom scipy import stats\nimport seaborn as sns\nfrom scipy.stats import bootstrap\n\n\n\nmy_file = Path(__file__).parent / \"SamplePointsMasterFrame.csv\"\ndf = pd.read_csv(my_file)\n\ntitle_str=['time_point',\n                      'som_width',\n                       'som_length',\n                       'som_area',\n                       'som_ecc',\n                        'amplitude', \n                      'signal_peaks',\n                      'signal_troughs',\n                      'period','sample_ind','cell_type','n_experiment','time_increasing_fl','time_decreasing_fl','power','caW_seg_l']  \n\n# fields with numeric data\ntitle_str_num=['time_point',\n                  'som_width',\n                    'som_length',\n                    'som_area',\n                    'som_ecc',\n                    'amplitude', \n                  'signal_peaks',\n                  'signal_troughs',\n                  'period',\n                  'time_increasing_fl',\n                  'time_decreasing_fl','power','caW_seg_l'] \n\nselectedn_dict_fudge={'n1': 8.0, 'n2': 9.0,'n3': 10.0,'n4': 11.0,'nn1': 1.0,'nn2': 2.0, 'nn5': 5.0,'nn6': 6.0,'nn7': 7.0,}\nselectedcell_type_fudge={'D5 P': 'D5 P', 'E5 P': 'E5 P','D5 A': 'D5 A', 'E5 A': 'E5 A'}\ncell_type_colour_dict={'D5 P':'m', 'E5 P':'r','D5 A':'k','E5 A':'b'}\nexpn_markerdict={'n1':'x','n2':'o','n3': '+','n4': '*','nn1': 'x','nn2': 'o','nn5': '+','nn6':'*','nn7':'^'}\n\n\n# Define a summary statistic for bootstrapping\nrng = np.random.default_rng()\ndef my_statistic(sample1, sample2, axis=-1):\n    mean1 = np.mean(sample1, axis=axis)\n    mean2 = np.mean(sample2, axis=axis)\n    return mean1 - mean2\n\n\n# Group data points together based on inputted information\ndef GroupDataPoints(datapoint_grouping_method,locdf,selectedcelltype,selectedn,title_str_num):\n  plot_traj=1\n  if datapoint_grouping_method=='Average within n':\n    plot_traj=0\n\n    df_avn=pd.DataFrame({'sample_ind': -1},index=[-1])\n    row_index=0\n    for sel_c_t in selectedcelltype:\n      for n_sel in selectedn:\n        dixt_add={}\n        for col in title_str_num:\n          \n          data_select_dataframe=((locdf[col].loc[(locdf['n_experiment']==selectedn_dict_fudge[n_sel])&(locdf['cell_type']==selectedcell_type_fudge[sel_c_t])])).astype(float)\n\n          data_point_med=data_select_dataframe.median()\n          data_point_sem=data_select_dataframe.sem()\n        \n          if np.isnan(data_point_med)==False:\n            dixt_add[col]=data_point_med\n            dixt_add[col+'sem']=data_point_sem\n\n          else:\n            dixt_add[col]=-1000.0\n\n        dixt_add['cell_type']=selectedcell_type_fudge[sel_c_t]\n        dixt_add['n_experiment']=selectedn_dict_fudge[n_sel]\n        dixt_add['sample_ind']=float(row_index)\n        \n        new_row = pd.Series(dixt_add)\n        df_avn=pd.concat([df_avn, new_row.to_frame().T],ignore_index=True)            \n        row_index=row_index+1\n    \n    #df_avn = df_avn.drop(df_avn[df_avn['sample_ind'] == -1].index)\n    locdf=df_avn.copy()\n  elif datapoint_grouping_method=='Average within somitoid':\n    plot_traj=0\n\n    # Make a new df - this will contain a series for each somitoif\n    df_avn=pd.DataFrame({'sample_ind': -1},index=[-1])\n    row_index=0\n    for sel_c_t in selectedcelltype: # loop over cell type\n      for n_sel in selectedn: # loop over n\n        sampleids=((locdf['sample_ind'].loc[(locdf['n_experiment']==selectedn_dict_fudge[n_sel])&(locdf['cell_type']==selectedcell_type_fudge[sel_c_t])]))\n        for samp_id in sampleids: # loop over sample id\n          dixt_add={}\n          abort_entry_flag=False\n          \n        \n          for col in title_str_num:\n            dataframe_to_analyse=((locdf[col].loc[(locdf['n_experiment']==selectedn_dict_fudge[n_sel])&(locdf['cell_type']==selectedcell_type_fudge[sel_c_t])&(locdf['sample_ind']==samp_id)])).astype(float)\n            data_point=dataframe_to_analyse.median()\n            data_point_sem=dataframe_to_analyse.sem()\n            if type(data_point)==float or int:\n              dixt_add[col]=data_point\n              new_col_sem=col+'sem'\n              dixt_add[new_col_sem]=data_point_sem\n            else:\n              dixt_add[col]=-1000.0\n              abort_entry_flag=True\n\n          dixt_add['cell_type']=selectedcell_type_fudge[sel_c_t]\n          dixt_add['n_experiment']=selectedn_dict_fudge[n_sel]\n          dixt_add['sample_ind']=samp_id\n          \n          # Add new entry to spreadsheet\n          new_row = pd.Series(dixt_add)\n          if abort_entry_flag==False:\n            df_avn=pd.concat([df_avn, new_row.to_frame().T],ignore_index=True)            \n    \n    df_avn=df_avn.drop(index=0)\n\n    locdf=df_avn.copy()\n\n  return locdf,plot_traj \n\napp_ui = ui.page_fluid(\n    ui.layout_sidebar(\n        ui.panel_sidebar(ui.input_select(id=\"x\",label=\"Variable\",choices=title_str,selected=[\"signal_troughs\"]),\n            ui.input_select(id=\"y\", label=\"Variable2\",choices=title_str,selected=[\"period\"]),\n            ui.input_checkbox_group(\n        \"selectedcelltype\",\n        \" Cell type(s):\",\n        {\n            \"D5 A\": ui.span(\"D5 A\", style=\"color: #000000;\"),\n            \"E5 A\": ui.span(\"E5 A\", style=\"color: #0000FF;\"),\n            \"D5 P\": ui.span(\"D5 P\", style=\"color: #FF00FF;\"),\n            \"E5 P\": ui.span(\"E5 P\", style=\"color: #FF0000;\"),        },\n        selected=[\"D5 A\",\"E5 A\"]\n    ),\n    ui.input_checkbox_group(\n        \"selectedn\",\n        \" n(s):\",\n        {\n            \"n1\": ui.span(\"Emb. n=1\"+expn_markerdict['n1'], style=\"color: #111112;\"),\n            \"n2\": ui.span(\"Emb. n=2\"+expn_markerdict['n2'], style=\"color: #111112;\"),\n            \"n3\": ui.span(\"Emb. n=3\"+expn_markerdict['n3'], style=\"color: #111112;\"),\n            \"n4\": ui.span(\"Emb. n=4\"+expn_markerdict['n4'], style=\"color: #111112;\"),\n            \"nn1\": ui.span(\"NEmb. n=1\"+expn_markerdict['nn1'], style=\"color: #111112;\"),\n            \"nn2\": ui.span(\"NEmb. n=2\"+expn_markerdict['nn2'], style=\"color: #111112;\"),\n            \"nn5\": ui.span(\"NEmb. n=5\"+expn_markerdict['nn5'], style=\"color: #111112;\"),\n            \"nn6\": ui.span(\"NEmb. n=6\"+expn_markerdict['nn6'], style=\"color: #111112;\"),\n            \"nn7\": ui.span(\"NEmb. n=7\"+expn_markerdict['nn7'], style=\"color: #111112;\"),  \n        },\n        selected=[\"n2\",\"n3\",\"n4\",\"nn1\",\"nn2\",\"nn5\",\"nn6\",\"nn7\"]\n    ),\n    ui.input_select(id=\"raw_or_z\", label=\"Raw/Z score\",choices=['Raw', 'Z score'],selected=[\"Raw\"]),\n    ui.input_radio_buttons(id='average_ns',label=\"Averaging datapoints\",choices=['All data','Average within n','Average within somitoid'],selected='All data'),\n    ui.input_radio_buttons(id='stests',label=\"Statistical tests\",choices=['Normal','Bootstrap'],selected='Bootstrap'),\n    ui.input_slider(id=\"period_max\",label=\"Period\",min=3.0,max=7.0,value=[3.5,5.5],step=0.1,drag_range=True),\n    ui.input_slider(id=\"som_init_len\",label=\"Somitoid length\",min=100.0,max=800.0,value=[120.1,700],step=5.0),           \n    ui.input_slider(id=\"t_max\",label=\"Samp. time\",min=0.0,max=25.0,value=[0.0,10.0],step=0.1),  \n    ui.input_slider(id=\"caw_seg\",label=\"CAW seg size\",min=-5.0,max=200.0,value=[-5.0,80.0],step=2),           \n    ui.input_slider(id=\"amp_min\",label=\"Amplitude\",min=0.0,max=2000.0,value=[0.0,500.0],step=0.05),     \n    ui.input_slider(id=\"power_min\",label=\"Power min.\",min=0.0,max=3.0,value=0.0,step=0.01),  \n    ui.input_file(id='input_file',label='Input file'),\n            ),\n        ui.panel_main(ui.output_plot(\"plot\"),),\n    ),\n    \n)\n\n\ndef server(input, output, session):\n    \n  @render.plot\n  def plot():\n    def parsed_file():\n      file: list[FileInfo] | None = input.input_file()\n      if file is None:\n          return pd.DataFrame()\n      return pd.read_csv(  # pyright: ignore[reportUnknownMemberType]\nfile[0][\"datapath\"],index_col=False\n      )\n    fig, ax = plt.subplots(6,1,figsize=(48,10))\n    #ax.set_ylim([-2, 2])\n    # Filter fata\n    global df\n\n\n    if input.input_file():\n      df = parsed_file()\n\n\n    locdf=df.copy()\n    locdf=locdf[title_str]\n\n      \n\n    period_min=input.period_max()[0]\n    period_max=input.period_max()[1]\n    som_length_min=input.som_init_len()[0]\n    som_length_max=input.som_init_len()[1]\n    t_min=input.t_max()[0]\n    t_max=input.t_max()[1]\n    caw_seg_min=input.caw_seg()[0]\n    caw_seg_max=input.caw_seg()[1]\n\n    power_min=input.power_min()\n    amp_min=input.amp_min()[0]\n    amp_max=input.amp_min()[1]\n\n    usebootstrap=False\n    stat_test=input.stests()\n\n    selectedcelltype=input.selectedcelltype()\n    selectedn=input.selectedn()\n    datapoint_grouping_method=input.average_ns()\n    #selectedregion=input.region()\n    selected_n_items=[]\n    for i1 in range(len(selectedn)):\n      selected_n_items.append(selectedn_dict_fudge[selectedn[i1]])\n    \n    selected_c_items=[]\n    for i1 in range(len(selectedcelltype)):\n      selected_c_items.append(selectedcell_type_fudge[selectedcelltype[i1]])  \n    \n    \n    # Select subset of data based on filter criteria\n    locdf=locdf[(locdf[\"period\"]&lt;period_max)&(locdf[\"period\"]&gt;period_min)&(locdf[\"som_length\"]&gt;som_length_min)&(locdf[\"time_point\"]&gt;=t_min)&(locdf[\"time_point\"]&lt;=t_max)&(locdf['n_experiment'].isin(selected_n_items))&(locdf['cell_type'].isin(selected_c_items))&(locdf['power']&gt;power_min)&(locdf['amplitude']&gt;amp_min)&(locdf['amplitude']&lt;amp_max)]#&(locdf['caW_seg_l']&lt;caw_seg_max)&(locdf['caW_seg_l']&gt;caw_seg_min)]\n\n\n    if input.raw_or_z()=='Z score':\n      # Find all data for a given n\n      for n_sel in selectedn:\n        for col in title_str_num:\n          data_n_c=np.array((locdf[col].loc[locdf['n_experiment']==selectedn_dict_fudge[n_sel]]).copy())\n          if len(data_n_c)&gt;2:\n            data_n_c=data_n_c.astype(float)\n\n            z_score_data=(data_n_c-np.nanmedian(data_n_c))/stats.median_abs_deviation(data_n_c,nan_policy='omit')\n            locdf.loc[locdf['n_experiment']==selectedn_dict_fudge[n_sel],col]=z_score_data \n    \n\n    # Group data points: per somitoid, per n or individual\n    locdf,plot_traj=GroupDataPoints(datapoint_grouping_method,locdf,selectedcelltype,selectedn,title_str_num)\n\n    \n    # Analysis of individual variables\n    # if average over all ns\n    x=locdf[input.x()]\n    y=locdf[input.y()]\n    cell_type=locdf[\"cell_type\"]\n    n=locdf[\"n_experiment\"]\n    sample_ind=locdf[\"sample_ind\"]\n\n\n    exp_count=np.nan*np.ones((len(selectedn),len(selectedcelltype)))\n\n    for cell_type_ind,sel_c_t in enumerate(selectedcelltype):\n      for exp_ind,n_sel in enumerate(selectedn):\n        data_n_c=locdf.loc[(locdf['n_experiment']==selectedn_dict_fudge[n_sel])&(locdf['cell_type']==selectedcell_type_fudge[sel_c_t])]\n        \n        exp_count[exp_ind,cell_type_ind]=len(data_n_c.to_numpy())\n\n        x_select=data_n_c[input.x()]\n        y_select=data_n_c[input.y()]\n\n        if datapoint_grouping_method in ['Average within n']:\n          x_std=data_n_c[input.x()+'sem']\n          y_std=data_n_c[input.x()+'sem']\n          ax[0].errorbar(x_select,y_select,xerr=x_std,yerr=y_std,color=cell_type_colour_dict[sel_c_t],marker=expn_markerdict[n_sel],elinewidth=1)\n        else:\n          ax[0].scatter(x_select,y_select,color=cell_type_colour_dict[sel_c_t],marker=expn_markerdict[n_sel])\n\n        if plot_traj==1:\n          for j1 in range(16):\n            data_n_c_traj=locdf.loc[(locdf['n_experiment']==selectedn_dict_fudge[n_sel])&(locdf['cell_type']==selectedcell_type_fudge[sel_c_t])&(locdf['sample_ind']==j1)]\n            \n            ax[0].plot(data_n_c_traj[input.x()],data_n_c_traj[input.y()],color=cell_type_colour_dict[sel_c_t],alpha=0.1)\n\n      ax[0].set_xlabel(input.x())\n      ax[0].set_ylabel(input.y())\n      ax[0].table(cellText=exp_count,rowLabels=selectedn,\n                colLabels=selectedcelltype,\n                loc='upper right',\n                colWidths=[0.1] * len(selectedcelltype))\n    \n    x_ticks=ax[0].get_xticks()\n    ax[0].set_xlim([x_ticks[0], x_ticks[-1]+(x_ticks[-1]-x_ticks[0])*0.3]) \n  \n    \n    \n    cell_type_tick_mark=np.array(range(len(selectedcelltype)))\n    \n    pvalues_mat=np.empty((len(selectedcelltype),len(selectedcelltype)),dtype='&lt;U100')\n\n    x_vals=[]\n    selected_Exp=[selectedn_dict_fudge[k] for k in selectedn]\n    for i,sel_c_t in enumerate(selectedcelltype):\n      # pull data from data frame for given cell type\n      x_vals_i=(locdf[input.x()].loc[(locdf['n_experiment'].isin(selected_Exp))&(locdf['cell_type']==selectedcell_type_fudge[sel_c_t])]).to_numpy(dtype=float)\n      \n      #data_n_c=locdf.loc[(locdf['n_experiment']==selectedn_dict_fudge[n_sel])&(locdf['cell_type']==selectedcell_type_fudge[sel_c_t])]\n        \n      normality_p_val=stats.shapiro(x_vals_i)\n      \n      normality_p_val=round(normality_p_val.pvalue,4)\n      #normality_p_val=0.01\n      for j,sel_c_t_j in enumerate(selectedcelltype):\n        x_vals_j=(locdf[input.x()].loc[(locdf['n_experiment'].isin(selected_Exp))&(locdf['cell_type']==selectedcell_type_fudge[sel_c_t_j])]).to_numpy(dtype=float)\n        if stat_test=='Normal':\n          if i&gt;j:\n            p_value=stats.mannwhitneyu(x_vals_i, x_vals_j, alternative=\"two-sided\").pvalue\n            #p_value=0.005\n            p_value=round(p_value,4)\n            pvalues_mat[i,j]=p_value\n          elif i==j:\n            pvalues_mat[i,j]=normality_p_val\n        elif stat_test=='Bootstrap':\n          data = (x_vals_i, x_vals_j)\n          res = bootstrap(data, my_statistic, method='basic', random_state=rng)\n          ci_l=round(res.confidence_interval[0],2)\n          ci_u=round(res.confidence_interval[1],2) #,res.confidence_interval[1]]\n          pvalues_mat[i,j] = '['+ str(ci_l)+', ' + str(ci_u)+']'        \n      x_vals.append(x_vals_i)\n    \n    color = [cell_type_colour_dict[j] for j in selectedcelltype] #[\"green\", \"White\", \"Red\", \"Yellow\", \"Green\", \"Grey\"] \n    sns.set_palette(color) \n    sns.boxplot(x_vals,ax=ax[1])\n    \n    #linecolor=\n    col_labels = selectedcelltype\n    row_labels = selectedcelltype\n    #plotting\n    ax[1].table(cellText=pvalues_mat,\n                colWidths=[0.2] * len(x_vals),\n                rowLabels=row_labels,\n                colLabels=col_labels,\n                loc='upper right')\n    ax[1].set_xlim([np.min(cell_type_tick_mark)-0.75, 4.0*np.max(cell_type_tick_mark)])             \n\n    ax[1].set_title(input.x())\n    ax[1].set_xticks(cell_type_tick_mark)\n    ax[1].set_xticklabels(selectedcelltype)\n    \n\n    pvalues_mat=np.empty((len(selectedcelltype),len(selectedcelltype)),dtype='&lt;U100')\n    \n    y_vals=[]\n    for i,sel_c_t in enumerate(selectedcelltype):\n      # pull data from data frame for given cell type\n      y_vals_i=(locdf[input.y()].loc[(locdf['n_experiment'].isin(selected_Exp))&(locdf['cell_type']==selectedcell_type_fudge[sel_c_t])]).to_numpy(dtype=float)\n\n      normality_p_val=stats.shapiro(y_vals_i)\n      \n      normality_p_val=round(normality_p_val.pvalue,4)\n      #normality_p_val=0.01\n      for j,sel_c_t_j in enumerate(selectedcelltype):\n        y_vals_j=(locdf[input.y()].loc[(locdf['n_experiment'].isin(selected_Exp))&(locdf['cell_type']==selectedcell_type_fudge[sel_c_t_j])]).to_numpy(dtype=float)\n\n        if stat_test=='Normal':\n          if i&gt;j:\n            p_value=stats.mannwhitneyu(y_vals_i, y_vals_j, alternative=\"two-sided\").pvalue\n            #p_value=0.005\n            p_value=round(p_value,4)\n            pvalues_mat[i,j]=str(p_value)\n          elif i==j:\n            pvalues_mat[i,j]=str(normality_p_val)\n        \n        elif stat_test=='Bootstrap':\n          data = (y_vals_i, y_vals_j)\n          res = bootstrap(data, my_statistic, method='basic', random_state=rng)\n          ci_l=round(res.confidence_interval[0],2)\n          ci_u=round(res.confidence_interval[1],2) #,res.confidence_interval[1]]\n          pvalues_mat[i,j] = '['+ str(ci_l)+', ' + str(ci_u)+']'\n\n      y_vals.append(y_vals_i)\n    \n    color = [cell_type_colour_dict[j] for j in selectedcelltype] #[\"green\", \"White\", \"Red\", \"Yellow\", \"Green\", \"Grey\"] \n    sns.set_palette(color) \n    sns.boxplot(y_vals,ax=ax[2])\n    \n    #linecolor=\n    col_labels = selectedcelltype\n    row_labels = selectedcelltype\n    \n\n  \n\n\n    table_obj=ax[2].table(cellText=pvalues_mat,\n                colWidths=[0.2] * len(x_vals),\n                rowLabels=row_labels,\n                colLabels=col_labels,\n                loc='upper right')\n    ax[2].set_xlim([np.min(cell_type_tick_mark)-0.75, 4.0*np.max(cell_type_tick_mark)])             \n\n    ax[2].set_title(input.y())\n    ax[2].set_xticks(cell_type_tick_mark)\n    ax[2].set_xticklabels(selectedcelltype)\n  \n    \n\n    title_str_num_test=['amplitude','power']\n\n    ## Correlation analysis on E5 and D5 - choose anterior \n    locdfE5=locdf[(locdf['cell_type']=='E5 A')]\n    locdfD5=locdf[(locdf['cell_type']=='D5 A')]\n    \n    locdfD5=locdfD5[title_str_num]\n    locdfE5=locdfE5[title_str_num]\n\n    #E5_locdf.drop(columns=E5_locdf.columns[0], axis=1, inplace=True)\n    #locdf.drop(columns=['n_experiment','cell_type'], axis=1, inplace=True)\n    locdfE5.rename(columns=lambda x: x[:8], inplace=True) #this will truncate the column name. Then print the dataframe\n    locdfD5.rename(columns=lambda x: x[:8], inplace=True) #this will truncate the column name. Then print the dataframe\n\n    \n    locdfE5np=locdfE5.to_numpy(copy=True,dtype=float)\n    locdfE5=pd.DataFrame(locdfE5np,columns=locdfE5.columns)\n\n    locdfD5np=locdfD5.to_numpy(copy=True,dtype=float)\n    locdfD5=pd.DataFrame(locdfD5np,columns=locdfD5.columns)\n    \n\n    corr_matE5=locdfE5.corr(method='spearman')\n    corr_matD5=locdfD5.corr(method='spearman')\n\n    mask = np.triu(np.ones_like(corr_matD5)) \n\n\n \n    #ax[1].text(x=0.5, y=0.5, s=(locdfE5).to_string(index=False))\n\n    #corr_matE5=locdfE5.to_numpy()\n    chart=sns.heatmap(corr_matE5, annot=True,annot_kws={'size':5.25},cmap=sns.diverging_palette(20, 220, n=200),vmin=-1.0,vmax=1.0,ax=ax[3],cbar=False,yticklabels=True,mask=mask)\n    ax[3].set_title('E5 corr. Ant')\n    ax[3].set_xticklabels(chart.get_xticklabels(),rotation=75,fontsize=6.0)\n    ax[3].set_yticklabels(chart.get_xticklabels(),fontsize=4.0)        \n    \n    chart=sns.heatmap(corr_matD5, annot=True,annot_kws={'size':5.25},cmap=sns.diverging_palette(20, 220, n=200),vmin=-1.0,vmax=1.0,ax=ax[4],cbar=False,yticklabels=True,mask=mask)\n    ax[4].set_title('D5 corr. Ant')\n    ax[4].set_xticklabels(chart.get_xticklabels(),rotation=75,fontsize=6.0)\n    ax[4].set_yticklabels(chart.get_xticklabels(),fontsize=4.0) \n\n  \n    chart=sns.heatmap(corr_matD5-corr_matE5, annot=True,annot_kws={'size':5.25},cmap=sns.diverging_palette(20, 220, n=200),vmin=-1.0,vmax=1.0,ax=ax[5],cbar=False,yticklabels=True,mask=mask)\n    ax[5].set_title('D5-E5 Ant correlation')\n    ax[5].set_xticklabels(chart.get_xticklabels(),rotation=75,fontsize=6.0)  \n    ax[5].set_yticklabels(chart.get_xticklabels(),fontsize=4.0) \n    \n          \n    \n      \n\napp = App(app_ui, server)\n\n\n## file: SamplePointsMasterFrame.csv\n,time_point,cell_type,n_experiment,som_width,som_length,PSM_length,amplitude,signal_peaks,period,signal_troughs,som_area,som_ecc,rel_amplitude,rel_troughs,rel_peaks,rel_period,sample_ind,time_decreasing_fl,time_increasing_fl,power,region,caW_seg_l\n0,3.6,Wibj2,1.0,187.530109334512,422.6930504725042,,1.973729821555833e-15,7.894919286223334e-16,6.200000000000001,-1.1842378929335002e-15,60692.71499130554,0.8961973949419874,,,,,1.0,0.6000000000000001,5.6000000000000005,0.0869827062231352,'All',50.0\n\n\n\n\nFigure 1: An app for exploring all the data."
  },
  {
    "objectID": "index.html#app-for-somitoid-data-exploration",
    "href": "index.html#app-for-somitoid-data-exploration",
    "title": "Data display",
    "section": "",
    "text": "#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 2000\n\nfrom shiny import App, Inputs, Outputs, Session, render, ui\nfrom shiny import reactive\n\nimport numpy as np\nimport pandas as pd\nfrom pathlib import Path\nimport matplotlib.pyplot as plt\nfrom scipy import stats\nimport seaborn as sns\nfrom scipy.stats import bootstrap\n\n\n\nmy_file = Path(__file__).parent / \"SamplePointsMasterFrame.csv\"\ndf = pd.read_csv(my_file)\n\ntitle_str=['time_point',\n                      'som_width',\n                       'som_length',\n                       'som_area',\n                       'som_ecc',\n                        'amplitude', \n                      'signal_peaks',\n                      'signal_troughs',\n                      'period','sample_ind','cell_type','n_experiment','time_increasing_fl','time_decreasing_fl','power','caW_seg_l']  \n\n# fields with numeric data\ntitle_str_num=['time_point',\n                  'som_width',\n                    'som_length',\n                    'som_area',\n                    'som_ecc',\n                    'amplitude', \n                  'signal_peaks',\n                  'signal_troughs',\n                  'period',\n                  'time_increasing_fl',\n                  'time_decreasing_fl','power','caW_seg_l'] \n\nselectedn_dict_fudge={'n1': 8.0, 'n2': 9.0,'n3': 10.0,'n4': 11.0,'nn1': 1.0,'nn2': 2.0, 'nn5': 5.0,'nn6': 6.0,'nn7': 7.0,}\nselectedcell_type_fudge={'D5 P': 'D5 P', 'E5 P': 'E5 P','D5 A': 'D5 A', 'E5 A': 'E5 A'}\ncell_type_colour_dict={'D5 P':'m', 'E5 P':'r','D5 A':'k','E5 A':'b'}\nexpn_markerdict={'n1':'x','n2':'o','n3': '+','n4': '*','nn1': 'x','nn2': 'o','nn5': '+','nn6':'*','nn7':'^'}\n\n\n# Define a summary statistic for bootstrapping\nrng = np.random.default_rng()\ndef my_statistic(sample1, sample2, axis=-1):\n    mean1 = np.mean(sample1, axis=axis)\n    mean2 = np.mean(sample2, axis=axis)\n    return mean1 - mean2\n\n\n# Group data points together based on inputted information\ndef GroupDataPoints(datapoint_grouping_method,locdf,selectedcelltype,selectedn,title_str_num):\n  plot_traj=1\n  if datapoint_grouping_method=='Average within n':\n    plot_traj=0\n\n    df_avn=pd.DataFrame({'sample_ind': -1},index=[-1])\n    row_index=0\n    for sel_c_t in selectedcelltype:\n      for n_sel in selectedn:\n        dixt_add={}\n        for col in title_str_num:\n          \n          data_select_dataframe=((locdf[col].loc[(locdf['n_experiment']==selectedn_dict_fudge[n_sel])&(locdf['cell_type']==selectedcell_type_fudge[sel_c_t])])).astype(float)\n\n          data_point_med=data_select_dataframe.median()\n          data_point_sem=data_select_dataframe.sem()\n        \n          if np.isnan(data_point_med)==False:\n            dixt_add[col]=data_point_med\n            dixt_add[col+'sem']=data_point_sem\n\n          else:\n            dixt_add[col]=-1000.0\n\n        dixt_add['cell_type']=selectedcell_type_fudge[sel_c_t]\n        dixt_add['n_experiment']=selectedn_dict_fudge[n_sel]\n        dixt_add['sample_ind']=float(row_index)\n        \n        new_row = pd.Series(dixt_add)\n        df_avn=pd.concat([df_avn, new_row.to_frame().T],ignore_index=True)            \n        row_index=row_index+1\n    \n    #df_avn = df_avn.drop(df_avn[df_avn['sample_ind'] == -1].index)\n    locdf=df_avn.copy()\n  elif datapoint_grouping_method=='Average within somitoid':\n    plot_traj=0\n\n    # Make a new df - this will contain a series for each somitoif\n    df_avn=pd.DataFrame({'sample_ind': -1},index=[-1])\n    row_index=0\n    for sel_c_t in selectedcelltype: # loop over cell type\n      for n_sel in selectedn: # loop over n\n        sampleids=((locdf['sample_ind'].loc[(locdf['n_experiment']==selectedn_dict_fudge[n_sel])&(locdf['cell_type']==selectedcell_type_fudge[sel_c_t])]))\n        for samp_id in sampleids: # loop over sample id\n          dixt_add={}\n          abort_entry_flag=False\n          \n        \n          for col in title_str_num:\n            dataframe_to_analyse=((locdf[col].loc[(locdf['n_experiment']==selectedn_dict_fudge[n_sel])&(locdf['cell_type']==selectedcell_type_fudge[sel_c_t])&(locdf['sample_ind']==samp_id)])).astype(float)\n            data_point=dataframe_to_analyse.median()\n            data_point_sem=dataframe_to_analyse.sem()\n            if type(data_point)==float or int:\n              dixt_add[col]=data_point\n              new_col_sem=col+'sem'\n              dixt_add[new_col_sem]=data_point_sem\n            else:\n              dixt_add[col]=-1000.0\n              abort_entry_flag=True\n\n          dixt_add['cell_type']=selectedcell_type_fudge[sel_c_t]\n          dixt_add['n_experiment']=selectedn_dict_fudge[n_sel]\n          dixt_add['sample_ind']=samp_id\n          \n          # Add new entry to spreadsheet\n          new_row = pd.Series(dixt_add)\n          if abort_entry_flag==False:\n            df_avn=pd.concat([df_avn, new_row.to_frame().T],ignore_index=True)            \n    \n    df_avn=df_avn.drop(index=0)\n\n    locdf=df_avn.copy()\n\n  return locdf,plot_traj \n\napp_ui = ui.page_fluid(\n    ui.layout_sidebar(\n        ui.panel_sidebar(ui.input_select(id=\"x\",label=\"Variable\",choices=title_str,selected=[\"signal_troughs\"]),\n            ui.input_select(id=\"y\", label=\"Variable2\",choices=title_str,selected=[\"period\"]),\n            ui.input_checkbox_group(\n        \"selectedcelltype\",\n        \" Cell type(s):\",\n        {\n            \"D5 A\": ui.span(\"D5 A\", style=\"color: #000000;\"),\n            \"E5 A\": ui.span(\"E5 A\", style=\"color: #0000FF;\"),\n            \"D5 P\": ui.span(\"D5 P\", style=\"color: #FF00FF;\"),\n            \"E5 P\": ui.span(\"E5 P\", style=\"color: #FF0000;\"),        },\n        selected=[\"D5 A\",\"E5 A\"]\n    ),\n    ui.input_checkbox_group(\n        \"selectedn\",\n        \" n(s):\",\n        {\n            \"n1\": ui.span(\"Emb. n=1\"+expn_markerdict['n1'], style=\"color: #111112;\"),\n            \"n2\": ui.span(\"Emb. n=2\"+expn_markerdict['n2'], style=\"color: #111112;\"),\n            \"n3\": ui.span(\"Emb. n=3\"+expn_markerdict['n3'], style=\"color: #111112;\"),\n            \"n4\": ui.span(\"Emb. n=4\"+expn_markerdict['n4'], style=\"color: #111112;\"),\n            \"nn1\": ui.span(\"NEmb. n=1\"+expn_markerdict['nn1'], style=\"color: #111112;\"),\n            \"nn2\": ui.span(\"NEmb. n=2\"+expn_markerdict['nn2'], style=\"color: #111112;\"),\n            \"nn5\": ui.span(\"NEmb. n=5\"+expn_markerdict['nn5'], style=\"color: #111112;\"),\n            \"nn6\": ui.span(\"NEmb. n=6\"+expn_markerdict['nn6'], style=\"color: #111112;\"),\n            \"nn7\": ui.span(\"NEmb. n=7\"+expn_markerdict['nn7'], style=\"color: #111112;\"),  \n        },\n        selected=[\"n2\",\"n3\",\"n4\",\"nn1\",\"nn2\",\"nn5\",\"nn6\",\"nn7\"]\n    ),\n    ui.input_select(id=\"raw_or_z\", label=\"Raw/Z score\",choices=['Raw', 'Z score'],selected=[\"Raw\"]),\n    ui.input_radio_buttons(id='average_ns',label=\"Averaging datapoints\",choices=['All data','Average within n','Average within somitoid'],selected='All data'),\n    ui.input_radio_buttons(id='stests',label=\"Statistical tests\",choices=['Normal','Bootstrap'],selected='Bootstrap'),\n    ui.input_slider(id=\"period_max\",label=\"Period\",min=3.0,max=7.0,value=[3.5,5.5],step=0.1,drag_range=True),\n    ui.input_slider(id=\"som_init_len\",label=\"Somitoid length\",min=100.0,max=800.0,value=[120.1,700],step=5.0),           \n    ui.input_slider(id=\"t_max\",label=\"Samp. time\",min=0.0,max=25.0,value=[0.0,10.0],step=0.1),  \n    ui.input_slider(id=\"caw_seg\",label=\"CAW seg size\",min=-5.0,max=200.0,value=[-5.0,80.0],step=2),           \n    ui.input_slider(id=\"amp_min\",label=\"Amplitude\",min=0.0,max=2000.0,value=[0.0,500.0],step=0.05),     \n    ui.input_slider(id=\"power_min\",label=\"Power min.\",min=0.0,max=3.0,value=0.0,step=0.01),  \n    ui.input_file(id='input_file',label='Input file'),\n            ),\n        ui.panel_main(ui.output_plot(\"plot\"),),\n    ),\n    \n)\n\n\ndef server(input, output, session):\n    \n  @render.plot\n  def plot():\n    def parsed_file():\n      file: list[FileInfo] | None = input.input_file()\n      if file is None:\n          return pd.DataFrame()\n      return pd.read_csv(  # pyright: ignore[reportUnknownMemberType]\nfile[0][\"datapath\"],index_col=False\n      )\n    fig, ax = plt.subplots(6,1,figsize=(48,10))\n    #ax.set_ylim([-2, 2])\n    # Filter fata\n    global df\n\n\n    if input.input_file():\n      df = parsed_file()\n\n\n    locdf=df.copy()\n    locdf=locdf[title_str]\n\n      \n\n    period_min=input.period_max()[0]\n    period_max=input.period_max()[1]\n    som_length_min=input.som_init_len()[0]\n    som_length_max=input.som_init_len()[1]\n    t_min=input.t_max()[0]\n    t_max=input.t_max()[1]\n    caw_seg_min=input.caw_seg()[0]\n    caw_seg_max=input.caw_seg()[1]\n\n    power_min=input.power_min()\n    amp_min=input.amp_min()[0]\n    amp_max=input.amp_min()[1]\n\n    usebootstrap=False\n    stat_test=input.stests()\n\n    selectedcelltype=input.selectedcelltype()\n    selectedn=input.selectedn()\n    datapoint_grouping_method=input.average_ns()\n    #selectedregion=input.region()\n    selected_n_items=[]\n    for i1 in range(len(selectedn)):\n      selected_n_items.append(selectedn_dict_fudge[selectedn[i1]])\n    \n    selected_c_items=[]\n    for i1 in range(len(selectedcelltype)):\n      selected_c_items.append(selectedcell_type_fudge[selectedcelltype[i1]])  \n    \n    \n    # Select subset of data based on filter criteria\n    locdf=locdf[(locdf[\"period\"]&lt;period_max)&(locdf[\"period\"]&gt;period_min)&(locdf[\"som_length\"]&gt;som_length_min)&(locdf[\"time_point\"]&gt;=t_min)&(locdf[\"time_point\"]&lt;=t_max)&(locdf['n_experiment'].isin(selected_n_items))&(locdf['cell_type'].isin(selected_c_items))&(locdf['power']&gt;power_min)&(locdf['amplitude']&gt;amp_min)&(locdf['amplitude']&lt;amp_max)]#&(locdf['caW_seg_l']&lt;caw_seg_max)&(locdf['caW_seg_l']&gt;caw_seg_min)]\n\n\n    if input.raw_or_z()=='Z score':\n      # Find all data for a given n\n      for n_sel in selectedn:\n        for col in title_str_num:\n          data_n_c=np.array((locdf[col].loc[locdf['n_experiment']==selectedn_dict_fudge[n_sel]]).copy())\n          if len(data_n_c)&gt;2:\n            data_n_c=data_n_c.astype(float)\n\n            z_score_data=(data_n_c-np.nanmedian(data_n_c))/stats.median_abs_deviation(data_n_c,nan_policy='omit')\n            locdf.loc[locdf['n_experiment']==selectedn_dict_fudge[n_sel],col]=z_score_data \n    \n\n    # Group data points: per somitoid, per n or individual\n    locdf,plot_traj=GroupDataPoints(datapoint_grouping_method,locdf,selectedcelltype,selectedn,title_str_num)\n\n    \n    # Analysis of individual variables\n    # if average over all ns\n    x=locdf[input.x()]\n    y=locdf[input.y()]\n    cell_type=locdf[\"cell_type\"]\n    n=locdf[\"n_experiment\"]\n    sample_ind=locdf[\"sample_ind\"]\n\n\n    exp_count=np.nan*np.ones((len(selectedn),len(selectedcelltype)))\n\n    for cell_type_ind,sel_c_t in enumerate(selectedcelltype):\n      for exp_ind,n_sel in enumerate(selectedn):\n        data_n_c=locdf.loc[(locdf['n_experiment']==selectedn_dict_fudge[n_sel])&(locdf['cell_type']==selectedcell_type_fudge[sel_c_t])]\n        \n        exp_count[exp_ind,cell_type_ind]=len(data_n_c.to_numpy())\n\n        x_select=data_n_c[input.x()]\n        y_select=data_n_c[input.y()]\n\n        if datapoint_grouping_method in ['Average within n']:\n          x_std=data_n_c[input.x()+'sem']\n          y_std=data_n_c[input.x()+'sem']\n          ax[0].errorbar(x_select,y_select,xerr=x_std,yerr=y_std,color=cell_type_colour_dict[sel_c_t],marker=expn_markerdict[n_sel],elinewidth=1)\n        else:\n          ax[0].scatter(x_select,y_select,color=cell_type_colour_dict[sel_c_t],marker=expn_markerdict[n_sel])\n\n        if plot_traj==1:\n          for j1 in range(16):\n            data_n_c_traj=locdf.loc[(locdf['n_experiment']==selectedn_dict_fudge[n_sel])&(locdf['cell_type']==selectedcell_type_fudge[sel_c_t])&(locdf['sample_ind']==j1)]\n            \n            ax[0].plot(data_n_c_traj[input.x()],data_n_c_traj[input.y()],color=cell_type_colour_dict[sel_c_t],alpha=0.1)\n\n      ax[0].set_xlabel(input.x())\n      ax[0].set_ylabel(input.y())\n      ax[0].table(cellText=exp_count,rowLabels=selectedn,\n                colLabels=selectedcelltype,\n                loc='upper right',\n                colWidths=[0.1] * len(selectedcelltype))\n    \n    x_ticks=ax[0].get_xticks()\n    ax[0].set_xlim([x_ticks[0], x_ticks[-1]+(x_ticks[-1]-x_ticks[0])*0.3]) \n  \n    \n    \n    cell_type_tick_mark=np.array(range(len(selectedcelltype)))\n    \n    pvalues_mat=np.empty((len(selectedcelltype),len(selectedcelltype)),dtype='&lt;U100')\n\n    x_vals=[]\n    selected_Exp=[selectedn_dict_fudge[k] for k in selectedn]\n    for i,sel_c_t in enumerate(selectedcelltype):\n      # pull data from data frame for given cell type\n      x_vals_i=(locdf[input.x()].loc[(locdf['n_experiment'].isin(selected_Exp))&(locdf['cell_type']==selectedcell_type_fudge[sel_c_t])]).to_numpy(dtype=float)\n      \n      #data_n_c=locdf.loc[(locdf['n_experiment']==selectedn_dict_fudge[n_sel])&(locdf['cell_type']==selectedcell_type_fudge[sel_c_t])]\n        \n      normality_p_val=stats.shapiro(x_vals_i)\n      \n      normality_p_val=round(normality_p_val.pvalue,4)\n      #normality_p_val=0.01\n      for j,sel_c_t_j in enumerate(selectedcelltype):\n        x_vals_j=(locdf[input.x()].loc[(locdf['n_experiment'].isin(selected_Exp))&(locdf['cell_type']==selectedcell_type_fudge[sel_c_t_j])]).to_numpy(dtype=float)\n        if stat_test=='Normal':\n          if i&gt;j:\n            p_value=stats.mannwhitneyu(x_vals_i, x_vals_j, alternative=\"two-sided\").pvalue\n            #p_value=0.005\n            p_value=round(p_value,4)\n            pvalues_mat[i,j]=p_value\n          elif i==j:\n            pvalues_mat[i,j]=normality_p_val\n        elif stat_test=='Bootstrap':\n          data = (x_vals_i, x_vals_j)\n          res = bootstrap(data, my_statistic, method='basic', random_state=rng)\n          ci_l=round(res.confidence_interval[0],2)\n          ci_u=round(res.confidence_interval[1],2) #,res.confidence_interval[1]]\n          pvalues_mat[i,j] = '['+ str(ci_l)+', ' + str(ci_u)+']'        \n      x_vals.append(x_vals_i)\n    \n    color = [cell_type_colour_dict[j] for j in selectedcelltype] #[\"green\", \"White\", \"Red\", \"Yellow\", \"Green\", \"Grey\"] \n    sns.set_palette(color) \n    sns.boxplot(x_vals,ax=ax[1])\n    \n    #linecolor=\n    col_labels = selectedcelltype\n    row_labels = selectedcelltype\n    #plotting\n    ax[1].table(cellText=pvalues_mat,\n                colWidths=[0.2] * len(x_vals),\n                rowLabels=row_labels,\n                colLabels=col_labels,\n                loc='upper right')\n    ax[1].set_xlim([np.min(cell_type_tick_mark)-0.75, 4.0*np.max(cell_type_tick_mark)])             \n\n    ax[1].set_title(input.x())\n    ax[1].set_xticks(cell_type_tick_mark)\n    ax[1].set_xticklabels(selectedcelltype)\n    \n\n    pvalues_mat=np.empty((len(selectedcelltype),len(selectedcelltype)),dtype='&lt;U100')\n    \n    y_vals=[]\n    for i,sel_c_t in enumerate(selectedcelltype):\n      # pull data from data frame for given cell type\n      y_vals_i=(locdf[input.y()].loc[(locdf['n_experiment'].isin(selected_Exp))&(locdf['cell_type']==selectedcell_type_fudge[sel_c_t])]).to_numpy(dtype=float)\n\n      normality_p_val=stats.shapiro(y_vals_i)\n      \n      normality_p_val=round(normality_p_val.pvalue,4)\n      #normality_p_val=0.01\n      for j,sel_c_t_j in enumerate(selectedcelltype):\n        y_vals_j=(locdf[input.y()].loc[(locdf['n_experiment'].isin(selected_Exp))&(locdf['cell_type']==selectedcell_type_fudge[sel_c_t_j])]).to_numpy(dtype=float)\n\n        if stat_test=='Normal':\n          if i&gt;j:\n            p_value=stats.mannwhitneyu(y_vals_i, y_vals_j, alternative=\"two-sided\").pvalue\n            #p_value=0.005\n            p_value=round(p_value,4)\n            pvalues_mat[i,j]=str(p_value)\n          elif i==j:\n            pvalues_mat[i,j]=str(normality_p_val)\n        \n        elif stat_test=='Bootstrap':\n          data = (y_vals_i, y_vals_j)\n          res = bootstrap(data, my_statistic, method='basic', random_state=rng)\n          ci_l=round(res.confidence_interval[0],2)\n          ci_u=round(res.confidence_interval[1],2) #,res.confidence_interval[1]]\n          pvalues_mat[i,j] = '['+ str(ci_l)+', ' + str(ci_u)+']'\n\n      y_vals.append(y_vals_i)\n    \n    color = [cell_type_colour_dict[j] for j in selectedcelltype] #[\"green\", \"White\", \"Red\", \"Yellow\", \"Green\", \"Grey\"] \n    sns.set_palette(color) \n    sns.boxplot(y_vals,ax=ax[2])\n    \n    #linecolor=\n    col_labels = selectedcelltype\n    row_labels = selectedcelltype\n    \n\n  \n\n\n    table_obj=ax[2].table(cellText=pvalues_mat,\n                colWidths=[0.2] * len(x_vals),\n                rowLabels=row_labels,\n                colLabels=col_labels,\n                loc='upper right')\n    ax[2].set_xlim([np.min(cell_type_tick_mark)-0.75, 4.0*np.max(cell_type_tick_mark)])             \n\n    ax[2].set_title(input.y())\n    ax[2].set_xticks(cell_type_tick_mark)\n    ax[2].set_xticklabels(selectedcelltype)\n  \n    \n\n    title_str_num_test=['amplitude','power']\n\n    ## Correlation analysis on E5 and D5 - choose anterior \n    locdfE5=locdf[(locdf['cell_type']=='E5 A')]\n    locdfD5=locdf[(locdf['cell_type']=='D5 A')]\n    \n    locdfD5=locdfD5[title_str_num]\n    locdfE5=locdfE5[title_str_num]\n\n    #E5_locdf.drop(columns=E5_locdf.columns[0], axis=1, inplace=True)\n    #locdf.drop(columns=['n_experiment','cell_type'], axis=1, inplace=True)\n    locdfE5.rename(columns=lambda x: x[:8], inplace=True) #this will truncate the column name. Then print the dataframe\n    locdfD5.rename(columns=lambda x: x[:8], inplace=True) #this will truncate the column name. Then print the dataframe\n\n    \n    locdfE5np=locdfE5.to_numpy(copy=True,dtype=float)\n    locdfE5=pd.DataFrame(locdfE5np,columns=locdfE5.columns)\n\n    locdfD5np=locdfD5.to_numpy(copy=True,dtype=float)\n    locdfD5=pd.DataFrame(locdfD5np,columns=locdfD5.columns)\n    \n\n    corr_matE5=locdfE5.corr(method='spearman')\n    corr_matD5=locdfD5.corr(method='spearman')\n\n    mask = np.triu(np.ones_like(corr_matD5)) \n\n\n \n    #ax[1].text(x=0.5, y=0.5, s=(locdfE5).to_string(index=False))\n\n    #corr_matE5=locdfE5.to_numpy()\n    chart=sns.heatmap(corr_matE5, annot=True,annot_kws={'size':5.25},cmap=sns.diverging_palette(20, 220, n=200),vmin=-1.0,vmax=1.0,ax=ax[3],cbar=False,yticklabels=True,mask=mask)\n    ax[3].set_title('E5 corr. Ant')\n    ax[3].set_xticklabels(chart.get_xticklabels(),rotation=75,fontsize=6.0)\n    ax[3].set_yticklabels(chart.get_xticklabels(),fontsize=4.0)        \n    \n    chart=sns.heatmap(corr_matD5, annot=True,annot_kws={'size':5.25},cmap=sns.diverging_palette(20, 220, n=200),vmin=-1.0,vmax=1.0,ax=ax[4],cbar=False,yticklabels=True,mask=mask)\n    ax[4].set_title('D5 corr. Ant')\n    ax[4].set_xticklabels(chart.get_xticklabels(),rotation=75,fontsize=6.0)\n    ax[4].set_yticklabels(chart.get_xticklabels(),fontsize=4.0) \n\n  \n    chart=sns.heatmap(corr_matD5-corr_matE5, annot=True,annot_kws={'size':5.25},cmap=sns.diverging_palette(20, 220, n=200),vmin=-1.0,vmax=1.0,ax=ax[5],cbar=False,yticklabels=True,mask=mask)\n    ax[5].set_title('D5-E5 Ant correlation')\n    ax[5].set_xticklabels(chart.get_xticklabels(),rotation=75,fontsize=6.0)  \n    ax[5].set_yticklabels(chart.get_xticklabels(),fontsize=4.0) \n    \n          \n    \n      \n\napp = App(app_ui, server)\n\n\n## file: SamplePointsMasterFrame.csv\n,time_point,cell_type,n_experiment,som_width,som_length,PSM_length,amplitude,signal_peaks,period,signal_troughs,som_area,som_ecc,rel_amplitude,rel_troughs,rel_peaks,rel_period,sample_ind,time_decreasing_fl,time_increasing_fl,power,region,caW_seg_l\n0,3.6,Wibj2,1.0,187.530109334512,422.6930504725042,,1.973729821555833e-15,7.894919286223334e-16,6.200000000000001,-1.1842378929335002e-15,60692.71499130554,0.8961973949419874,,,,,1.0,0.6000000000000001,5.6000000000000005,0.0869827062231352,'All',50.0\n\n\n\n\nFigure 1: An app for exploring all the data."
  }
]