[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data display",
    "section": "",
    "text": "#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 2000\n\nfrom shiny import App, Inputs, Outputs, Session, render, ui\nfrom shiny import reactive\n\nimport numpy as np\nimport pandas as pd\nfrom pathlib import Path\nimport matplotlib.pyplot as plt\nfrom scipy import stats\nimport seaborn as sns\n\n\nmy_file = Path(__file__).parent / \"SamplePointsMasterFrame.csv\"\ndf = pd.read_csv(my_file)\n\ntitle_str=['time_point',\n                      'som_width',\n                       'som_length',\n                       'som_area',\n                       'som_ecc',\n                        'amplitude', \n                      'signal_peaks',\n                      'signal_troughs',\n                      'period','sample_ind','cell_type','n_experiment','time_increasing_fl','time_decreasing_fl','power','region','caW_seg_l']                     \nselectedn_dict_fudge={'n1': 8.0, 'n2': 9.0,'n3': 10.0,'n4': 11.0}\nselectedcell_type_fudge={'D5 P': 'D5 P', 'E5 P': 'E5 P','D5 A': 'D5 A', 'E5 A': 'E5 A'}\ncell_type_colour_dict={'D5 P':'m', 'E5 P':'r','D5 A':'k','E5 A':'b'}\nexpn_markerdict={'n1':'x','n2':'o','n3': '+','n4': '*'}\n\n#region=['All','Post PSM','Ant PSM']\n\n\napp_ui = ui.page_fluid(\n    ui.layout_sidebar(\n        ui.panel_sidebar(ui.input_select(id=\"x\",label=\"Variable\",choices=title_str,selected=[\"signal_troughs\"]),\n            ui.input_select(id=\"y\", label=\"Variable2\",choices=title_str,selected=[\"period\"]),\n            ui.input_checkbox_group(\n        \"selectedcelltype\",\n        \" Cell type(s):\",\n        {\n            \"D5 A\": ui.span(\"D5 A\", style=\"color: #000000;\"),\n            \"E5 A\": ui.span(\"E5 A\", style=\"color: #0000FF;\"),\n            \"D5 P\": ui.span(\"D5 P\", style=\"color: #FF00FF;\"),\n            \"E5 P\": ui.span(\"E5 P\", style=\"color: #FF0000;\"),        },\n        selected=[\"D5 A\",\"E5 A\"]\n    ),\n    ui.input_checkbox_group(\n        \"selectedn\",\n        \" n(s):\",\n        {\n            \"n1\": ui.span(\"n=1\"+expn_markerdict['n1'], style=\"color: #111112;\"),\n            \"n2\": ui.span(\"n=2\"+expn_markerdict['n2'], style=\"color: #111112;\"),\n            \"n3\": ui.span(\"n=3\"+expn_markerdict['n3'], style=\"color: #111112;\"),\n            \"n4\": ui.span(\"n=4\"+expn_markerdict['n4'], style=\"color: #111112;\"),\n          \n\n        },\n        selected=[\"n2\",\"n3\",\"n4\"]\n    ),\n    ui.input_select(id=\"raw_or_z\", label=\"Raw/Z score\",choices=['Raw', 'Z score'],selected=[\"Raw\"]),\n    ui.input_radio_buttons(id='average_ns',label=\"Average within n\",choices=['All data','Average within n','Average within somitoid'],selected='All data'),\n    ui.input_slider(id=\"period_max\",label=\"Period\",min=3.0,max=7.0,value=[3.5,5.5],step=0.1,drag_range=True),\n    ui.input_slider(id=\"som_init_len\",label=\"Somitoid length\",min=100.0,max=800.0,value=[120.1,700],step=5.0),           \n    ui.input_slider(id=\"t_max\",label=\"Samp. time\",min=0.0,max=25.0,value=[0.0,10.0],step=0.1),  \n    ui.input_slider(id=\"caw_seg\",label=\"CAW seg size\",min=0.0,max=200.0,value=[3.0,80.0],step=2),           \n    ui.input_slider(id=\"amp_min\",label=\"Amplitude\",min=0.0,max=500.0,value=[0.0,500.0],step=0.05),     \n    ui.input_slider(id=\"power_min\",label=\"Power min.\",min=0.0,max=3.0,value=0.0,step=0.01),  \n    ui.input_file(id='input_file',label='Input file'),\n            ),\n        ui.panel_main(ui.output_plot(\"plot\"),),\n    ),\n    \n)\n\n\ndef server(input, output, session):\n    \n  @render.plot\n  def plot():\n    def parsed_file():\n      file: list[FileInfo] | None = input.input_file()\n      if file is None:\n          return pd.DataFrame()\n      return pd.read_csv(  # pyright: ignore[reportUnknownMemberType]\nfile[0][\"datapath\"]\n      )\n    fig, ax = plt.subplots(6,1,figsize=(48,10))\n    #ax.set_ylim([-2, 2])\n    # Filter fata\n    global df\n\n\n    if input.input_file():\n      df = parsed_file()\n\n\n    locdf=df\n    locdf=locdf[title_str]\n\n    title_str_num=['time_point',\n                  'som_width',\n                    'som_length',\n                    'som_area',\n                    'som_ecc',\n                    'amplitude', \n                  'signal_peaks',\n                  'signal_troughs',\n                  'period',\n                  'time_increasing_fl',\n                  'time_decreasing_fl','power','caW_seg_l']               \n\n    period_min=input.period_max()[0]\n    period_max=input.period_max()[1]\n    som_length_min=input.som_init_len()[0]\n    som_length_max=input.som_init_len()[1]\n    t_min=input.t_max()[0]\n    t_max=input.t_max()[1]\n    caw_seg_min=input.caw_seg()[0]\n    caw_seg_max=input.caw_seg()[1]\n\n    power_min=input.power_min()\n    amp_min=input.amp_min()[0]\n    amp_max=input.amp_min()[1]\n\n    selectedcelltype=input.selectedcelltype()\n    selectedn=input.selectedn()\n    #selectedregion=input.region()\n    selected_n_items=[]\n    for i1 in range(len(selectedn)):\n      selected_n_items.append(selectedn_dict_fudge[selectedn[i1]])\n    \n    selected_c_items=[]\n    for i1 in range(len(selectedcelltype)):\n      selected_c_items.append(selectedcell_type_fudge[selectedcelltype[i1]])  \n    \n\n    locdfE5=locdf[(locdf[\"period\"]&lt;period_max)&(locdf[\"period\"]&gt;period_min)&(locdf[\"som_length\"]&gt;som_length_min)&(locdf[\"time_point\"]&gt;=t_min)&(locdf[\"time_point\"]&lt;=t_max)&(locdf['n_experiment'].isin(selected_n_items))&(locdf['cell_type'].isin(['E5 A']))&(locdf['power']&gt;power_min)&(locdf['amplitude']&gt;amp_min)&(locdf['amplitude']&lt;amp_max)&(locdf['caW_seg_l']&lt;caw_seg_max)&(locdf['caW_seg_l']&gt;caw_seg_min)]\n\n    locdfD5=locdf[(locdf[\"period\"]&lt;period_max)&(locdf[\"period\"]&gt;period_min)&(locdf[\"som_length\"]&gt;som_length_min)&(locdf[\"time_point\"]&gt;=t_min)&(locdf[\"time_point\"]&lt;=t_max)&(locdf['n_experiment'].isin(selected_n_items))&(locdf['cell_type'].isin(['D5 A']))&(locdf['power']&gt;power_min)&(locdf['amplitude']&gt;amp_min)&(locdf['amplitude']&lt;amp_max)&(locdf['caW_seg_l']&lt;caw_seg_max)&(locdf['caW_seg_l']&gt;caw_seg_min)]\n\n\n    \n    # Select subset of data based on filter criteria\n    locdf=locdf[(locdf[\"period\"]&lt;period_max)&(locdf[\"period\"]&gt;period_min)&(locdf[\"som_length\"]&gt;som_length_min)&(locdf[\"time_point\"]&gt;=t_min)&(locdf[\"time_point\"]&lt;=t_max)&(locdf['n_experiment'].isin(selected_n_items))&(locdf['cell_type'].isin(selected_c_items))&(locdf['power']&gt;power_min)&(locdf['amplitude']&gt;amp_min)&(locdf['amplitude']&lt;amp_max)&(locdf['caW_seg_l']&lt;caw_seg_max)&(locdf['caW_seg_l']&gt;caw_seg_min)]\n\n\n    if input.raw_or_z()=='Z score':\n      # Find all data for a given n\n      for n_sel in selectedn:\n        for col in title_str_num:\n          data_n_c=np.array((locdf[col].loc[locdf['n_experiment']==selectedn_dict_fudge[n_sel]]).copy())\n          if len(data_n_c)&gt;2:\n            data_n_c=data_n_c.astype(float)\n\n            z_score_data=(data_n_c-np.nanmedian(data_n_c))/stats.median_abs_deviation(data_n_c,nan_policy='omit')\n            locdf.loc[locdf['n_experiment']==selectedn_dict_fudge[n_sel],col]=z_score_data \n    \n    \n    # if average over all ns\n    x=locdf[input.x()]\n    y=locdf[input.y()]\n    cell_type=locdf[\"cell_type\"]\n    n=locdf[\"n_experiment\"]\n    sample_ind=locdf[\"sample_ind\"]\n\n    plot_traj=1\n\n    if input.average_ns()=='Average within n':\n      plot_traj=0\n\n      df_avn=pd.DataFrame({'sample_ind': -1},index=[-1])\n      row_index=0\n      for sel_c_t in selectedcelltype:\n        for n_sel in selectedn:\n          dixt_add={}\n          for col in title_str_num:\n            data_point=((locdf[col].loc[(locdf['n_experiment']==selectedn_dict_fudge[n_sel])&(locdf['cell_type']==selectedcell_type_fudge[sel_c_t])])).median()\n            if np.isnan(data_point)==False:\n              dixt_add[col]=data_point\n            #else:\n            #  dixt_add[col]=-100.0\n\n          dixt_add['cell_type']=selectedcell_type_fudge[sel_c_t]\n          dixt_add['n_experiment']=selectedn_dict_fudge[n_sel]\n          dixt_add['sample_ind']=float(row_index)\n          \n          new_row = pd.Series(dixt_add)\n          df_avn=pd.concat([df_avn, new_row.to_frame().T],ignore_index=True)            \n          row_index=row_index+1\n      \n      #df_avn = df_avn.drop(df_avn[df_avn['sample_ind'] == -1].index)\n      locdf=df_avn\n    elif input.average_ns()=='Average within somitoid':\n      plot_traj=0\n\n      df_avn=pd.DataFrame({'sample_ind': -1},index=[-1])\n      row_index=0\n      for sel_c_t in selectedcelltype: # loop over cell type\n        for n_sel in selectedn: # loop over n\n          for samp_id in range(14): # loop over sample id\n            dixt_add={}\n            for col in title_str_num:\n              data_point=((locdf[col].loc[(locdf['n_experiment']==selectedn_dict_fudge[n_sel])&(locdf['cell_type']==selectedcell_type_fudge[sel_c_t])&(locdf['sample_ind']==samp_id)])).median()\n              if np.isnan(data_point)==False:\n                dixt_add[col]=data_point\n              #else:\n              #  dixt_add[col]=-100.0\n\n              dixt_add['cell_type']=selectedcell_type_fudge[sel_c_t]\n              dixt_add['n_experiment']=selectedn_dict_fudge[n_sel]\n              dixt_add['sample_ind']=samp_id\n            \n            # Add new entry to spreadsheet\n            new_row = pd.Series(dixt_add)\n            df_avn=pd.concat([df_avn, new_row.to_frame().T],ignore_index=True)            \n            row_index=row_index+1\n      \n      #df_avn = df_avn.drop(df_avn[df_avn['sample_ind'] == -1].index)\n      locdf=df_avn\n\n    \n    exp_count=np.nan*np.ones((len(selectedn),len(selectedcelltype)))\n\n    for cell_type_ind,sel_c_t in enumerate(selectedcelltype):\n      for exp_ind,n_sel in enumerate(selectedn):\n        data_n_c=locdf.loc[(locdf['n_experiment']==selectedn_dict_fudge[n_sel])&(locdf['cell_type']==selectedcell_type_fudge[sel_c_t])]\n        \n        exp_count[exp_ind,cell_type_ind]=len(data_n_c.to_numpy())\n\n        x_select=data_n_c[input.x()]\n        y_select=data_n_c[input.y()]\n\n      \n        ax[0].scatter(x_select,y_select,color=cell_type_colour_dict[sel_c_t],marker=expn_markerdict[n_sel])\n\n        if plot_traj==1:\n          for j1 in range(16):\n            data_n_c_traj=locdf.loc[(locdf['n_experiment']==selectedn_dict_fudge[n_sel])&(locdf['cell_type']==selectedcell_type_fudge[sel_c_t])&(locdf['sample_ind']==j1)]\n            \n            ax[0].plot(data_n_c_traj[input.x()],data_n_c_traj[input.y()],color=cell_type_colour_dict[sel_c_t],alpha=0.1)\n\n      ax[0].set_xlabel(input.x())\n      ax[0].set_ylabel(input.y())\n      ax[0].table(cellText=exp_count,rowLabels=selectedn,\n                colLabels=selectedcelltype,\n                loc='upper right',\n                colWidths=[0.1] * len(selectedcelltype))\n    \n    x_ticks=ax[0].get_xticks()\n    ax[0].set_xlim([x_ticks[0], x_ticks[-1]+(x_ticks[-1]-x_ticks[0])*0.3]) \n  \n    \n    \n    cell_type_tick_mark=np.array(range(len(selectedcelltype)))\n    pvalues_mat=np.nan*np.ones((len(selectedcelltype),len(selectedcelltype)))\n    \n    x_vals=[]\n    selected_Exp=[selectedn_dict_fudge[k] for k in selectedn]\n    for i,sel_c_t in enumerate(selectedcelltype):\n      # pull data from data frame for given cell type\n      x_vals_i=(locdf[input.x()].loc[(locdf['n_experiment'].isin(selected_Exp))&(locdf['cell_type']==selectedcell_type_fudge[sel_c_t])]).to_numpy(dtype=float)\n\n      normality_p_val=stats.shapiro(x_vals_i)\n      \n      normality_p_val=round(normality_p_val.pvalue,4)\n      #normality_p_val=0.01\n      for j,sel_c_t_j in enumerate(selectedcelltype):\n        x_vals_j=(locdf[input.x()].loc[(locdf['n_experiment'].isin(selected_Exp))&(locdf['cell_type']==selectedcell_type_fudge[sel_c_t_j])]).to_numpy(dtype=float)\n\n        if i&gt;j:\n          p_value=stats.mannwhitneyu(x_vals_i, x_vals_j, alternative=\"two-sided\").pvalue\n          #p_value=0.005\n          p_value=round(p_value,4)\n          pvalues_mat[i,j]=p_value\n        elif i==j:\n          pvalues_mat[i,j]=normality_p_val\n      x_vals.append(x_vals_i)\n    \n    color = [cell_type_colour_dict[j] for j in selectedcelltype] #[\"green\", \"White\", \"Red\", \"Yellow\", \"Green\", \"Grey\"] \n    sns.set_palette(color) \n    sns.boxplot(x_vals,ax=ax[1])\n    \n    #linecolor=\n    col_labels = selectedcelltype\n    row_labels = selectedcelltype\n    #plotting\n    ax[1].table(cellText=pvalues_mat,\n                colWidths=[0.1] * len(x_vals),\n                rowLabels=row_labels,\n                colLabels=col_labels,\n                loc='upper right')\n    ax[1].set_xlim([np.min(cell_type_tick_mark)-0.75, 3.0*np.max(cell_type_tick_mark)])             \n\n    ax[1].set_title(input.x())\n    ax[1].set_xticks(cell_type_tick_mark)\n    ax[1].set_xticklabels(selectedcelltype)\n    \n    y_vals=[]\n    for i,sel_c_t in enumerate(selectedcelltype):\n      # pull data from data frame for given cell type\n      y_vals_i=(locdf[input.y()].loc[(locdf['n_experiment'].isin(selected_Exp))&(locdf['cell_type']==selectedcell_type_fudge[sel_c_t])]).to_numpy(dtype=float)\n\n      normality_p_val=stats.shapiro(y_vals_i)\n      \n      normality_p_val=round(normality_p_val.pvalue,4)\n      #normality_p_val=0.01\n      for j,sel_c_t_j in enumerate(selectedcelltype):\n        y_vals_j=(locdf[input.y()].loc[(locdf['n_experiment'].isin(selected_Exp))&(locdf['cell_type']==selectedcell_type_fudge[sel_c_t_j])]).to_numpy(dtype=float)\n\n        if i&gt;j:\n          p_value=stats.mannwhitneyu(y_vals_i, y_vals_j, alternative=\"two-sided\").pvalue\n          #p_value=0.005\n          p_value=round(p_value,4)\n          pvalues_mat[i,j]=p_value\n        elif i==j:\n          pvalues_mat[i,j]=normality_p_val\n      y_vals.append(y_vals_i)\n    \n    color = [cell_type_colour_dict[j] for j in selectedcelltype] #[\"green\", \"White\", \"Red\", \"Yellow\", \"Green\", \"Grey\"] \n    sns.set_palette(color) \n    sns.boxplot(y_vals,ax=ax[2])\n    \n    #linecolor=\n    col_labels = selectedcelltype\n    row_labels = selectedcelltype\n    #plotting\n    ax[2].table(cellText=pvalues_mat,\n                colWidths=[0.1] * len(x_vals),\n                rowLabels=row_labels,\n                colLabels=col_labels,\n                loc='upper right')\n    ax[2].set_xlim([np.min(cell_type_tick_mark)-0.75, 3.0*np.max(cell_type_tick_mark)])             \n\n    ax[2].set_title(input.y())\n    ax[2].set_xticks(cell_type_tick_mark)\n    ax[2].set_xticklabels(selectedcelltype)\n  \n    \n\n\n    #E5_locdf.drop(columns=E5_locdf.columns[0], axis=1, inplace=True)\n    #locdf.drop(columns=['n_experiment','cell_type'], axis=1, inplace=True)\n    locdfE5.rename(columns=lambda x: x[:8], inplace=True) #this will truncate the column name. Then print the dataframe\n    locdfD5.rename(columns=lambda x: x[:8], inplace=True) #this will truncate the column name. Then print the dataframe\n\n\n    corr_matE5=locdfE5.corr(numeric_only=True,method='spearman')\n    corr_matD5=locdfD5.corr(numeric_only=True,method='spearman')\n\n    mask = np.triu(np.ones_like(corr_matD5)) \n\n    \n    chart=sns.heatmap(corr_matE5, annot=True,annot_kws={'size':5.25},cmap=sns.diverging_palette(20, 220, n=200),vmin=-1.0,vmax=1.0,ax=ax[3],cbar=False,yticklabels=True,mask=mask)\n    ax[3].set_title('E5 corr. Ant')\n    ax[3].set_xticklabels(chart.get_xticklabels(),rotation=75,fontsize=6.0)\n    \n    #ax[3].set_yticks(np.linspace(0,corr_mat.shape[0]))\n\n    ax[3].set_yticklabels(chart.get_xticklabels(),fontsize=4.0)        \n\n    chart=sns.heatmap(corr_matD5, annot=True,annot_kws={'size':5.25},cmap=sns.diverging_palette(20, 220, n=200),vmin=-1.0,vmax=1.0,ax=ax[4],cbar=False,yticklabels=True,mask=mask)\n    ax[4].set_title('D5 corr. Ant')\n    ax[4].set_xticklabels(chart.get_xticklabels(),rotation=75,fontsize=6.0)\n    \n    #ax[3].set_yticks(np.linspace(0,corr_mat.shape[0]))\n\n    ax[4].set_yticklabels(chart.get_xticklabels(),fontsize=4.0) \n\n    chart=sns.heatmap(corr_matE5, annot=True,annot_kws={'size':5.25},cmap=sns.diverging_palette(20, 220, n=200),vmin=-1.0,vmax=1.0,ax=ax[3],cbar=False,yticklabels=True,mask=mask)\n    ax[3].set_title('E5 corr. Ant')\n    ax[3].set_xticklabels(chart.get_xticklabels(),rotation=75,fontsize=6.0)\n    \n    #ax[3].set_yticks(np.linspace(0,corr_mat.shape[0]))\n\n    ax[5].set_yticklabels(chart.get_xticklabels(),fontsize=4.0)        \n\n    chart=sns.heatmap(corr_matD5-corr_matE5, annot=True,annot_kws={'size':5.25},cmap=sns.diverging_palette(20, 220, n=200),vmin=-1.0,vmax=1.0,ax=ax[5],cbar=False,yticklabels=True,mask=mask)\n    ax[5].set_title('D5-E5 Ant correlation')\n    ax[5].set_xticklabels(chart.get_xticklabels(),rotation=75,fontsize=6.0)\n    \n    #ax[3].set_yticks(np.linspace(0,corr_mat.shape[0]))\n\n    ax[5].set_yticklabels(chart.get_xticklabels(),fontsize=4.0)       \n    \n      \n\napp = App(app_ui, server)\n\n\n## file: SamplePointsMasterFrame.csv\n,time_point,cell_type,n_experiment,som_width,som_length,PSM_length,amplitude,signal_peaks,period,signal_troughs,som_area,som_ecc,rel_amplitude,rel_troughs,rel_peaks,rel_period,sample_ind,time_decreasing_fl,time_increasing_fl,power,region, caW_seg_l\n0,3.6,Wibj2,1.0,187.530109334512,422.6930504725042,,1.973729821555833e-15,7.894919286223334e-16,6.200000000000001,-1.1842378929335002e-15,60692.71499130554,0.8961973949419874,,,,,1.0,0.6000000000000001,5.6000000000000005,0.0869827062231352,'All',50.0\n\n\n\n\nFigure 1: An app for exploring all the data."
  },
  {
    "objectID": "index.html#app-for-embedded-somitoid-data-exploration",
    "href": "index.html#app-for-embedded-somitoid-data-exploration",
    "title": "Data display",
    "section": "",
    "text": "#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 2000\n\nfrom shiny import App, Inputs, Outputs, Session, render, ui\nfrom shiny import reactive\n\nimport numpy as np\nimport pandas as pd\nfrom pathlib import Path\nimport matplotlib.pyplot as plt\nfrom scipy import stats\nimport seaborn as sns\n\n\nmy_file = Path(__file__).parent / \"SamplePointsMasterFrame.csv\"\ndf = pd.read_csv(my_file)\n\ntitle_str=['time_point',\n                      'som_width',\n                       'som_length',\n                       'som_area',\n                       'som_ecc',\n                        'amplitude', \n                      'signal_peaks',\n                      'signal_troughs',\n                      'period','sample_ind','cell_type','n_experiment','time_increasing_fl','time_decreasing_fl','power','region','caW_seg_l']                     \nselectedn_dict_fudge={'n1': 8.0, 'n2': 9.0,'n3': 10.0,'n4': 11.0}\nselectedcell_type_fudge={'D5 P': 'D5 P', 'E5 P': 'E5 P','D5 A': 'D5 A', 'E5 A': 'E5 A'}\ncell_type_colour_dict={'D5 P':'m', 'E5 P':'r','D5 A':'k','E5 A':'b'}\nexpn_markerdict={'n1':'x','n2':'o','n3': '+','n4': '*'}\n\n#region=['All','Post PSM','Ant PSM']\n\n\napp_ui = ui.page_fluid(\n    ui.layout_sidebar(\n        ui.panel_sidebar(ui.input_select(id=\"x\",label=\"Variable\",choices=title_str,selected=[\"signal_troughs\"]),\n            ui.input_select(id=\"y\", label=\"Variable2\",choices=title_str,selected=[\"period\"]),\n            ui.input_checkbox_group(\n        \"selectedcelltype\",\n        \" Cell type(s):\",\n        {\n            \"D5 A\": ui.span(\"D5 A\", style=\"color: #000000;\"),\n            \"E5 A\": ui.span(\"E5 A\", style=\"color: #0000FF;\"),\n            \"D5 P\": ui.span(\"D5 P\", style=\"color: #FF00FF;\"),\n            \"E5 P\": ui.span(\"E5 P\", style=\"color: #FF0000;\"),        },\n        selected=[\"D5 A\",\"E5 A\"]\n    ),\n    ui.input_checkbox_group(\n        \"selectedn\",\n        \" n(s):\",\n        {\n            \"n1\": ui.span(\"n=1\"+expn_markerdict['n1'], style=\"color: #111112;\"),\n            \"n2\": ui.span(\"n=2\"+expn_markerdict['n2'], style=\"color: #111112;\"),\n            \"n3\": ui.span(\"n=3\"+expn_markerdict['n3'], style=\"color: #111112;\"),\n            \"n4\": ui.span(\"n=4\"+expn_markerdict['n4'], style=\"color: #111112;\"),\n          \n\n        },\n        selected=[\"n2\",\"n3\",\"n4\"]\n    ),\n    ui.input_select(id=\"raw_or_z\", label=\"Raw/Z score\",choices=['Raw', 'Z score'],selected=[\"Raw\"]),\n    ui.input_radio_buttons(id='average_ns',label=\"Average within n\",choices=['All data','Average within n','Average within somitoid'],selected='All data'),\n    ui.input_slider(id=\"period_max\",label=\"Period\",min=3.0,max=7.0,value=[3.5,5.5],step=0.1,drag_range=True),\n    ui.input_slider(id=\"som_init_len\",label=\"Somitoid length\",min=100.0,max=800.0,value=[120.1,700],step=5.0),           \n    ui.input_slider(id=\"t_max\",label=\"Samp. time\",min=0.0,max=25.0,value=[0.0,10.0],step=0.1),  \n    ui.input_slider(id=\"caw_seg\",label=\"CAW seg size\",min=0.0,max=200.0,value=[3.0,80.0],step=2),           \n    ui.input_slider(id=\"amp_min\",label=\"Amplitude\",min=0.0,max=500.0,value=[0.0,500.0],step=0.05),     \n    ui.input_slider(id=\"power_min\",label=\"Power min.\",min=0.0,max=3.0,value=0.0,step=0.01),  \n    ui.input_file(id='input_file',label='Input file'),\n            ),\n        ui.panel_main(ui.output_plot(\"plot\"),),\n    ),\n    \n)\n\n\ndef server(input, output, session):\n    \n  @render.plot\n  def plot():\n    def parsed_file():\n      file: list[FileInfo] | None = input.input_file()\n      if file is None:\n          return pd.DataFrame()\n      return pd.read_csv(  # pyright: ignore[reportUnknownMemberType]\nfile[0][\"datapath\"]\n      )\n    fig, ax = plt.subplots(6,1,figsize=(48,10))\n    #ax.set_ylim([-2, 2])\n    # Filter fata\n    global df\n\n\n    if input.input_file():\n      df = parsed_file()\n\n\n    locdf=df\n    locdf=locdf[title_str]\n\n    title_str_num=['time_point',\n                  'som_width',\n                    'som_length',\n                    'som_area',\n                    'som_ecc',\n                    'amplitude', \n                  'signal_peaks',\n                  'signal_troughs',\n                  'period',\n                  'time_increasing_fl',\n                  'time_decreasing_fl','power','caW_seg_l']               \n\n    period_min=input.period_max()[0]\n    period_max=input.period_max()[1]\n    som_length_min=input.som_init_len()[0]\n    som_length_max=input.som_init_len()[1]\n    t_min=input.t_max()[0]\n    t_max=input.t_max()[1]\n    caw_seg_min=input.caw_seg()[0]\n    caw_seg_max=input.caw_seg()[1]\n\n    power_min=input.power_min()\n    amp_min=input.amp_min()[0]\n    amp_max=input.amp_min()[1]\n\n    selectedcelltype=input.selectedcelltype()\n    selectedn=input.selectedn()\n    #selectedregion=input.region()\n    selected_n_items=[]\n    for i1 in range(len(selectedn)):\n      selected_n_items.append(selectedn_dict_fudge[selectedn[i1]])\n    \n    selected_c_items=[]\n    for i1 in range(len(selectedcelltype)):\n      selected_c_items.append(selectedcell_type_fudge[selectedcelltype[i1]])  \n    \n\n    locdfE5=locdf[(locdf[\"period\"]&lt;period_max)&(locdf[\"period\"]&gt;period_min)&(locdf[\"som_length\"]&gt;som_length_min)&(locdf[\"time_point\"]&gt;=t_min)&(locdf[\"time_point\"]&lt;=t_max)&(locdf['n_experiment'].isin(selected_n_items))&(locdf['cell_type'].isin(['E5 A']))&(locdf['power']&gt;power_min)&(locdf['amplitude']&gt;amp_min)&(locdf['amplitude']&lt;amp_max)&(locdf['caW_seg_l']&lt;caw_seg_max)&(locdf['caW_seg_l']&gt;caw_seg_min)]\n\n    locdfD5=locdf[(locdf[\"period\"]&lt;period_max)&(locdf[\"period\"]&gt;period_min)&(locdf[\"som_length\"]&gt;som_length_min)&(locdf[\"time_point\"]&gt;=t_min)&(locdf[\"time_point\"]&lt;=t_max)&(locdf['n_experiment'].isin(selected_n_items))&(locdf['cell_type'].isin(['D5 A']))&(locdf['power']&gt;power_min)&(locdf['amplitude']&gt;amp_min)&(locdf['amplitude']&lt;amp_max)&(locdf['caW_seg_l']&lt;caw_seg_max)&(locdf['caW_seg_l']&gt;caw_seg_min)]\n\n\n    \n    # Select subset of data based on filter criteria\n    locdf=locdf[(locdf[\"period\"]&lt;period_max)&(locdf[\"period\"]&gt;period_min)&(locdf[\"som_length\"]&gt;som_length_min)&(locdf[\"time_point\"]&gt;=t_min)&(locdf[\"time_point\"]&lt;=t_max)&(locdf['n_experiment'].isin(selected_n_items))&(locdf['cell_type'].isin(selected_c_items))&(locdf['power']&gt;power_min)&(locdf['amplitude']&gt;amp_min)&(locdf['amplitude']&lt;amp_max)&(locdf['caW_seg_l']&lt;caw_seg_max)&(locdf['caW_seg_l']&gt;caw_seg_min)]\n\n\n    if input.raw_or_z()=='Z score':\n      # Find all data for a given n\n      for n_sel in selectedn:\n        for col in title_str_num:\n          data_n_c=np.array((locdf[col].loc[locdf['n_experiment']==selectedn_dict_fudge[n_sel]]).copy())\n          if len(data_n_c)&gt;2:\n            data_n_c=data_n_c.astype(float)\n\n            z_score_data=(data_n_c-np.nanmedian(data_n_c))/stats.median_abs_deviation(data_n_c,nan_policy='omit')\n            locdf.loc[locdf['n_experiment']==selectedn_dict_fudge[n_sel],col]=z_score_data \n    \n    \n    # if average over all ns\n    x=locdf[input.x()]\n    y=locdf[input.y()]\n    cell_type=locdf[\"cell_type\"]\n    n=locdf[\"n_experiment\"]\n    sample_ind=locdf[\"sample_ind\"]\n\n    plot_traj=1\n\n    if input.average_ns()=='Average within n':\n      plot_traj=0\n\n      df_avn=pd.DataFrame({'sample_ind': -1},index=[-1])\n      row_index=0\n      for sel_c_t in selectedcelltype:\n        for n_sel in selectedn:\n          dixt_add={}\n          for col in title_str_num:\n            data_point=((locdf[col].loc[(locdf['n_experiment']==selectedn_dict_fudge[n_sel])&(locdf['cell_type']==selectedcell_type_fudge[sel_c_t])])).median()\n            if np.isnan(data_point)==False:\n              dixt_add[col]=data_point\n            #else:\n            #  dixt_add[col]=-100.0\n\n          dixt_add['cell_type']=selectedcell_type_fudge[sel_c_t]\n          dixt_add['n_experiment']=selectedn_dict_fudge[n_sel]\n          dixt_add['sample_ind']=float(row_index)\n          \n          new_row = pd.Series(dixt_add)\n          df_avn=pd.concat([df_avn, new_row.to_frame().T],ignore_index=True)            \n          row_index=row_index+1\n      \n      #df_avn = df_avn.drop(df_avn[df_avn['sample_ind'] == -1].index)\n      locdf=df_avn\n    elif input.average_ns()=='Average within somitoid':\n      plot_traj=0\n\n      df_avn=pd.DataFrame({'sample_ind': -1},index=[-1])\n      row_index=0\n      for sel_c_t in selectedcelltype: # loop over cell type\n        for n_sel in selectedn: # loop over n\n          for samp_id in range(14): # loop over sample id\n            dixt_add={}\n            for col in title_str_num:\n              data_point=((locdf[col].loc[(locdf['n_experiment']==selectedn_dict_fudge[n_sel])&(locdf['cell_type']==selectedcell_type_fudge[sel_c_t])&(locdf['sample_ind']==samp_id)])).median()\n              if np.isnan(data_point)==False:\n                dixt_add[col]=data_point\n              #else:\n              #  dixt_add[col]=-100.0\n\n              dixt_add['cell_type']=selectedcell_type_fudge[sel_c_t]\n              dixt_add['n_experiment']=selectedn_dict_fudge[n_sel]\n              dixt_add['sample_ind']=samp_id\n            \n            # Add new entry to spreadsheet\n            new_row = pd.Series(dixt_add)\n            df_avn=pd.concat([df_avn, new_row.to_frame().T],ignore_index=True)            \n            row_index=row_index+1\n      \n      #df_avn = df_avn.drop(df_avn[df_avn['sample_ind'] == -1].index)\n      locdf=df_avn\n\n    \n    exp_count=np.nan*np.ones((len(selectedn),len(selectedcelltype)))\n\n    for cell_type_ind,sel_c_t in enumerate(selectedcelltype):\n      for exp_ind,n_sel in enumerate(selectedn):\n        data_n_c=locdf.loc[(locdf['n_experiment']==selectedn_dict_fudge[n_sel])&(locdf['cell_type']==selectedcell_type_fudge[sel_c_t])]\n        \n        exp_count[exp_ind,cell_type_ind]=len(data_n_c.to_numpy())\n\n        x_select=data_n_c[input.x()]\n        y_select=data_n_c[input.y()]\n\n      \n        ax[0].scatter(x_select,y_select,color=cell_type_colour_dict[sel_c_t],marker=expn_markerdict[n_sel])\n\n        if plot_traj==1:\n          for j1 in range(16):\n            data_n_c_traj=locdf.loc[(locdf['n_experiment']==selectedn_dict_fudge[n_sel])&(locdf['cell_type']==selectedcell_type_fudge[sel_c_t])&(locdf['sample_ind']==j1)]\n            \n            ax[0].plot(data_n_c_traj[input.x()],data_n_c_traj[input.y()],color=cell_type_colour_dict[sel_c_t],alpha=0.1)\n\n      ax[0].set_xlabel(input.x())\n      ax[0].set_ylabel(input.y())\n      ax[0].table(cellText=exp_count,rowLabels=selectedn,\n                colLabels=selectedcelltype,\n                loc='upper right',\n                colWidths=[0.1] * len(selectedcelltype))\n    \n    x_ticks=ax[0].get_xticks()\n    ax[0].set_xlim([x_ticks[0], x_ticks[-1]+(x_ticks[-1]-x_ticks[0])*0.3]) \n  \n    \n    \n    cell_type_tick_mark=np.array(range(len(selectedcelltype)))\n    pvalues_mat=np.nan*np.ones((len(selectedcelltype),len(selectedcelltype)))\n    \n    x_vals=[]\n    selected_Exp=[selectedn_dict_fudge[k] for k in selectedn]\n    for i,sel_c_t in enumerate(selectedcelltype):\n      # pull data from data frame for given cell type\n      x_vals_i=(locdf[input.x()].loc[(locdf['n_experiment'].isin(selected_Exp))&(locdf['cell_type']==selectedcell_type_fudge[sel_c_t])]).to_numpy(dtype=float)\n\n      normality_p_val=stats.shapiro(x_vals_i)\n      \n      normality_p_val=round(normality_p_val.pvalue,4)\n      #normality_p_val=0.01\n      for j,sel_c_t_j in enumerate(selectedcelltype):\n        x_vals_j=(locdf[input.x()].loc[(locdf['n_experiment'].isin(selected_Exp))&(locdf['cell_type']==selectedcell_type_fudge[sel_c_t_j])]).to_numpy(dtype=float)\n\n        if i&gt;j:\n          p_value=stats.mannwhitneyu(x_vals_i, x_vals_j, alternative=\"two-sided\").pvalue\n          #p_value=0.005\n          p_value=round(p_value,4)\n          pvalues_mat[i,j]=p_value\n        elif i==j:\n          pvalues_mat[i,j]=normality_p_val\n      x_vals.append(x_vals_i)\n    \n    color = [cell_type_colour_dict[j] for j in selectedcelltype] #[\"green\", \"White\", \"Red\", \"Yellow\", \"Green\", \"Grey\"] \n    sns.set_palette(color) \n    sns.boxplot(x_vals,ax=ax[1])\n    \n    #linecolor=\n    col_labels = selectedcelltype\n    row_labels = selectedcelltype\n    #plotting\n    ax[1].table(cellText=pvalues_mat,\n                colWidths=[0.1] * len(x_vals),\n                rowLabels=row_labels,\n                colLabels=col_labels,\n                loc='upper right')\n    ax[1].set_xlim([np.min(cell_type_tick_mark)-0.75, 3.0*np.max(cell_type_tick_mark)])             \n\n    ax[1].set_title(input.x())\n    ax[1].set_xticks(cell_type_tick_mark)\n    ax[1].set_xticklabels(selectedcelltype)\n    \n    y_vals=[]\n    for i,sel_c_t in enumerate(selectedcelltype):\n      # pull data from data frame for given cell type\n      y_vals_i=(locdf[input.y()].loc[(locdf['n_experiment'].isin(selected_Exp))&(locdf['cell_type']==selectedcell_type_fudge[sel_c_t])]).to_numpy(dtype=float)\n\n      normality_p_val=stats.shapiro(y_vals_i)\n      \n      normality_p_val=round(normality_p_val.pvalue,4)\n      #normality_p_val=0.01\n      for j,sel_c_t_j in enumerate(selectedcelltype):\n        y_vals_j=(locdf[input.y()].loc[(locdf['n_experiment'].isin(selected_Exp))&(locdf['cell_type']==selectedcell_type_fudge[sel_c_t_j])]).to_numpy(dtype=float)\n\n        if i&gt;j:\n          p_value=stats.mannwhitneyu(y_vals_i, y_vals_j, alternative=\"two-sided\").pvalue\n          #p_value=0.005\n          p_value=round(p_value,4)\n          pvalues_mat[i,j]=p_value\n        elif i==j:\n          pvalues_mat[i,j]=normality_p_val\n      y_vals.append(y_vals_i)\n    \n    color = [cell_type_colour_dict[j] for j in selectedcelltype] #[\"green\", \"White\", \"Red\", \"Yellow\", \"Green\", \"Grey\"] \n    sns.set_palette(color) \n    sns.boxplot(y_vals,ax=ax[2])\n    \n    #linecolor=\n    col_labels = selectedcelltype\n    row_labels = selectedcelltype\n    #plotting\n    ax[2].table(cellText=pvalues_mat,\n                colWidths=[0.1] * len(x_vals),\n                rowLabels=row_labels,\n                colLabels=col_labels,\n                loc='upper right')\n    ax[2].set_xlim([np.min(cell_type_tick_mark)-0.75, 3.0*np.max(cell_type_tick_mark)])             \n\n    ax[2].set_title(input.y())\n    ax[2].set_xticks(cell_type_tick_mark)\n    ax[2].set_xticklabels(selectedcelltype)\n  \n    \n\n\n    #E5_locdf.drop(columns=E5_locdf.columns[0], axis=1, inplace=True)\n    #locdf.drop(columns=['n_experiment','cell_type'], axis=1, inplace=True)\n    locdfE5.rename(columns=lambda x: x[:8], inplace=True) #this will truncate the column name. Then print the dataframe\n    locdfD5.rename(columns=lambda x: x[:8], inplace=True) #this will truncate the column name. Then print the dataframe\n\n\n    corr_matE5=locdfE5.corr(numeric_only=True,method='spearman')\n    corr_matD5=locdfD5.corr(numeric_only=True,method='spearman')\n\n    mask = np.triu(np.ones_like(corr_matD5)) \n\n    \n    chart=sns.heatmap(corr_matE5, annot=True,annot_kws={'size':5.25},cmap=sns.diverging_palette(20, 220, n=200),vmin=-1.0,vmax=1.0,ax=ax[3],cbar=False,yticklabels=True,mask=mask)\n    ax[3].set_title('E5 corr. Ant')\n    ax[3].set_xticklabels(chart.get_xticklabels(),rotation=75,fontsize=6.0)\n    \n    #ax[3].set_yticks(np.linspace(0,corr_mat.shape[0]))\n\n    ax[3].set_yticklabels(chart.get_xticklabels(),fontsize=4.0)        \n\n    chart=sns.heatmap(corr_matD5, annot=True,annot_kws={'size':5.25},cmap=sns.diverging_palette(20, 220, n=200),vmin=-1.0,vmax=1.0,ax=ax[4],cbar=False,yticklabels=True,mask=mask)\n    ax[4].set_title('D5 corr. Ant')\n    ax[4].set_xticklabels(chart.get_xticklabels(),rotation=75,fontsize=6.0)\n    \n    #ax[3].set_yticks(np.linspace(0,corr_mat.shape[0]))\n\n    ax[4].set_yticklabels(chart.get_xticklabels(),fontsize=4.0) \n\n    chart=sns.heatmap(corr_matE5, annot=True,annot_kws={'size':5.25},cmap=sns.diverging_palette(20, 220, n=200),vmin=-1.0,vmax=1.0,ax=ax[3],cbar=False,yticklabels=True,mask=mask)\n    ax[3].set_title('E5 corr. Ant')\n    ax[3].set_xticklabels(chart.get_xticklabels(),rotation=75,fontsize=6.0)\n    \n    #ax[3].set_yticks(np.linspace(0,corr_mat.shape[0]))\n\n    ax[5].set_yticklabels(chart.get_xticklabels(),fontsize=4.0)        \n\n    chart=sns.heatmap(corr_matD5-corr_matE5, annot=True,annot_kws={'size':5.25},cmap=sns.diverging_palette(20, 220, n=200),vmin=-1.0,vmax=1.0,ax=ax[5],cbar=False,yticklabels=True,mask=mask)\n    ax[5].set_title('D5-E5 Ant correlation')\n    ax[5].set_xticklabels(chart.get_xticklabels(),rotation=75,fontsize=6.0)\n    \n    #ax[3].set_yticks(np.linspace(0,corr_mat.shape[0]))\n\n    ax[5].set_yticklabels(chart.get_xticklabels(),fontsize=4.0)       \n    \n      \n\napp = App(app_ui, server)\n\n\n## file: SamplePointsMasterFrame.csv\n,time_point,cell_type,n_experiment,som_width,som_length,PSM_length,amplitude,signal_peaks,period,signal_troughs,som_area,som_ecc,rel_amplitude,rel_troughs,rel_peaks,rel_period,sample_ind,time_decreasing_fl,time_increasing_fl,power,region, caW_seg_l\n0,3.6,Wibj2,1.0,187.530109334512,422.6930504725042,,1.973729821555833e-15,7.894919286223334e-16,6.200000000000001,-1.1842378929335002e-15,60692.71499130554,0.8961973949419874,,,,,1.0,0.6000000000000001,5.6000000000000005,0.0869827062231352,'All',50.0\n\n\n\n\nFigure 1: An app for exploring all the data."
  }
]