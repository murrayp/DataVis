---
title: "Time series display"
author: "PM"
filters:
  - shinylive
---



## App for time series exploration 

::: {#fig-dataexplore}

```{shinylive-python}
#| standalone: true
#| components: [viewer]
#| viewerHeight: 2000

from shiny import App, Inputs, Outputs, Session, render, ui
from shiny import reactive

import numpy as np
import pandas as pd
from pathlib import Path
import pandas as pd
import matplotlib.pyplot as plt
from scipy.signal import detrend
import scipy.ndimage as nd
from scipy.integrate import solve_ivp



app_ui = ui.page_fluid(
    ui.layout_sidebar(
        ui.panel_sidebar(
    
  
    ui.input_slider(id='Coupling',label="Coupling",  min=0.0,max=3.0,value=0.01,step=0.005),

    ui.input_slider(id='cell_back_ground',label="cell_back_ground",  min=0.0,max=3.0,value=0.1,step=0.005),
    ui.input_slider(id='trend_strength',label="trend_strength",  min=0.0,max=0.03,value=0.002,step=0.0005),
    ui.input_slider(id='osc_amp',label="osc_amp",  min=0.0,max=0.03,value=0.004,step=0.0005),
    ui.input_select(id='Init_cond',label="Init_cond",choices=['Synced','Random'],selected='Synced'),
            ),
        ui.panel_main(ui.output_plot("plot"),),
    ),
    
)

def server(input, output, session):
    
  @render.plot
  def plot():
    
    om_i=2*np.pi/4.5
    A=input.Coupling()
    N_cells=100
    a=input.osc_amp()
    cell_back_ground=input.cell_back_ground()
    k=input.trend_strength()  
    init_cond=input.Init_cond()

    def kuramoto(t,y):
        
        dydt = np.zeros_like(y)

        for i in range(len(y)):

            coupling_term=np.sum(np.sin(y-y[i]))
            dydt[i]=om_i+A/N_cells*coupling_term
        return dydt

    if init_cond=='Synced':
      y0=np.squeeze(np.zeros((N_cells,1),dtype=float))
    else:
      y0=np.squeeze(np.zeros((N_cells,1),dtype=float))

      y0=np.random.uniform(0.0,2*np.pi,len(y0))
    T=20.0


    print(y0)
    #sol = odeint(pend, y0, t, args=(om_i))
    sol = solve_ivp(kuramoto, [0, T], y0,dense_output=True,t_eval=np.linspace(0,T,500))


    y=sol.y
    t=sol.t

    gene_exp=a/2.0*(1.0+np.sin(y))+cell_back_ground
    for i in range(N_cells):
        gene_exp[i,:]+=t*k


    total_sig=np.sum(gene_exp,axis=0)

    fig,ax=plt.subplots(3,1)
    ax[1].plot(sol.t,gene_exp[0,:], 'b', sol.t,gene_exp[9,:], 'r')
    ax[1].set_xlabel('$t (h)$')
    ax[1].set_ylabel('Intensity')
    ax[1].set_title('Individual oscillators')
    ax[1].legend(['Osc. 1','Osc. 10'])

    ax[2].plot(sol.t,total_sig, 'b')
    ax[2].set_ylabel('Intensity')
    ax[2].set_title('Simulated average over FOV')
    ax[2].set_xlabel('$t (h)$')

    ax[0].pcolor(gene_exp)
    ax[0].set_xlabel('$t(h)$')
    ax[0].set_ylabel('Osc. index')
    ax[0].set_title('Heat map of all oscillators')

    fig.tight_layout()
    plt.show()

      
app = App(app_ui, server)



```

An app for exploring all the data.
:::